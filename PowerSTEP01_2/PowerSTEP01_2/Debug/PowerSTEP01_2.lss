
PowerSTEP01_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000d56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002801  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001054  00000000  00000000  00003831  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000135e  00000000  00000000  00004885  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f8  00000000  00000000  00005be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099b  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024db  00000000  00000000  00006b77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00009052  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 b8 04 	jmp	0x970	; 0x970 <__vector_17>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	ab 01       	movw	r20, r22
  ae:	af 01       	movw	r20, r30
  b0:	b3 01       	movw	r22, r6
  b2:	b7 01       	movw	r22, r14
  b4:	be 01       	movw	r22, r28
  b6:	c2 01       	movw	r24, r4
  b8:	c6 01       	movw	r24, r12
  ba:	ca 01       	movw	r24, r20
  bc:	d2 01       	movw	r26, r4
  be:	d6 01       	movw	r26, r12
  c0:	da 01       	movw	r26, r20
  c2:	de 01       	movw	r26, r28
  c4:	e2 01       	movw	r28, r4
  c6:	e6 01       	movw	r28, r12
  c8:	ea 01       	movw	r28, r20
  ca:	ee 01       	movw	r28, r28
  cc:	f2 01       	movw	r30, r4
  ce:	fa 01       	movw	r30, r20
  d0:	fe 01       	movw	r30, r28
  d2:	06 02       	muls	r16, r22
  d4:	ce 01       	movw	r24, r28
  d6:	0e 02       	muls	r16, r30
  d8:	12 02       	muls	r17, r18
  da:	16 02       	muls	r17, r22
  dc:	1a 02       	muls	r17, r26
  de:	1e 02       	muls	r17, r30
  e0:	22 02       	muls	r18, r18

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf ef       	ldi	r28, 0xFF	; 255
  e8:	da e0       	ldi	r29, 0x0A	; 10
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a0 31       	cpi	r26, 0x10	; 16
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 c2 04 	call	0x984	; 0x984 <main>
 102:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <ADCInit>:

#include "R2R.h"

void ADCInit(void)
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 10a:	aa e7       	ldi	r26, 0x7A	; 122
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	8c 91       	ld	r24, X
 110:	87 60       	ori	r24, 0x07	; 7
 112:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS0) | (1 << ADLAR); // 10 bit reading (Right adjust)
 114:	ec e7       	ldi	r30, 0x7C	; 124
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 66       	ori	r24, 0x60	; 96
 11c:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX0); // set to pin 0 of port F
 11e:	80 81       	ld	r24, Z
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX1); // set to pin 0 of port F
 124:	80 81       	ld	r24, Z
 126:	8d 7f       	andi	r24, 0xFD	; 253
 128:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX2); // set to pin 0 of port F
 12a:	80 81       	ld	r24, Z
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX3); // set to pin 0 of port F
 130:	80 81       	ld	r24, Z
 132:	87 7f       	andi	r24, 0xF7	; 247
 134:	80 83       	st	Z, r24
	#if defined(__AVR_ATmega32U4__)
		ADMUX &= ~(1 << MUX4); // set to pin 0 of port F
 136:	80 81       	ld	r24, Z
 138:	8f 7e       	andi	r24, 0xEF	; 239
 13a:	80 83       	st	Z, r24
		ADCSRB &= ~(1 << MUX5); // set to pin 0 of port F
 13c:	eb e7       	ldi	r30, 0x7B	; 123
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	8f 7d       	andi	r24, 0xDF	; 223
 144:	80 83       	st	Z, r24
	#endif
	ADCSRA |= (1 << ADEN);  // Enable ADC
 146:	8c 91       	ld	r24, X
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	8c 93       	st	X, r24
 14c:	08 95       	ret

0000014e <SPIXfer>:

	for (int8_t i = 2; i >= 0; i--)
	{
		SPIXferMotors(motor, bytePointer[i]);
	}
}
 14e:	0e 94 9d 04 	call	0x93a	; 0x93a <transfer>
 152:	08 95       	ret

00000154 <SPIXferMotors>:
 154:	af 92       	push	r10
 156:	bf 92       	push	r11
 158:	cf 92       	push	r12
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	00 d0       	rcall	.+0      	; 0x16a <SPIXferMotors+0x16>
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	e6 2e       	mov	r14, r22
 172:	f8 2e       	mov	r15, r24
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	8f 15       	cp	r24, r15
 178:	20 f4       	brcc	.+8      	; 0x182 <SPIXferMotors+0x2e>
 17a:	0f 2e       	mov	r0, r31
 17c:	f3 e0       	ldi	r31, 0x03	; 3
 17e:	ff 2e       	mov	r15, r31
 180:	f0 2d       	mov	r31, r0
 182:	28 98       	cbi	0x05, 0	; 5
 184:	f1 10       	cpse	r15, r1
 186:	11 c0       	rjmp	.+34     	; 0x1aa <SPIXferMotors+0x56>
 188:	8e 01       	movw	r16, r28
 18a:	0f 5f       	subi	r16, 0xFF	; 255
 18c:	1f 4f       	sbci	r17, 0xFF	; 255
 18e:	6e 01       	movw	r12, r28
 190:	94 e0       	ldi	r25, 0x04	; 4
 192:	c9 0e       	add	r12, r25
 194:	d1 1c       	adc	r13, r1
 196:	8e 2d       	mov	r24, r14
 198:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
 19c:	f8 01       	movw	r30, r16
 19e:	81 93       	st	Z+, r24
 1a0:	8f 01       	movw	r16, r30
 1a2:	ce 16       	cp	r12, r30
 1a4:	df 06       	cpc	r13, r31
 1a6:	b9 f7       	brne	.-18     	; 0x196 <SPIXferMotors+0x42>
 1a8:	1d c0       	rjmp	.+58     	; 0x1e4 <SPIXferMotors+0x90>
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	6c 01       	movw	r12, r24
 1b0:	03 e0       	ldi	r16, 0x03	; 3
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	af 2c       	mov	r10, r15
 1b6:	b1 2c       	mov	r11, r1
 1b8:	0a 15       	cp	r16, r10
 1ba:	1b 05       	cpc	r17, r11
 1bc:	31 f4       	brne	.+12     	; 0x1ca <SPIXferMotors+0x76>
 1be:	8e 2d       	mov	r24, r14
 1c0:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
 1c4:	f6 01       	movw	r30, r12
 1c6:	80 83       	st	Z, r24
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <SPIXferMotors+0x80>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
 1d0:	f6 01       	movw	r30, r12
 1d2:	80 83       	st	Z, r24
 1d4:	01 50       	subi	r16, 0x01	; 1
 1d6:	11 09       	sbc	r17, r1
 1d8:	ff ef       	ldi	r31, 0xFF	; 255
 1da:	cf 1a       	sub	r12, r31
 1dc:	df 0a       	sbc	r13, r31
 1de:	01 15       	cp	r16, r1
 1e0:	11 05       	cpc	r17, r1
 1e2:	51 f7       	brne	.-44     	; 0x1b8 <SPIXferMotors+0x64>
 1e4:	28 9a       	sbi	0x05, 0	; 5
 1e6:	e3 e0       	ldi	r30, 0x03	; 3
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	ef 19       	sub	r30, r15
 1ec:	f1 09       	sbc	r31, r1
 1ee:	ec 0f       	add	r30, r28
 1f0:	fd 1f       	adc	r31, r29
 1f2:	81 81       	ldd	r24, Z+1	; 0x01
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	cf 90       	pop	r12
 20a:	bf 90       	pop	r11
 20c:	af 90       	pop	r10
 20e:	08 95       	ret

00000210 <SPIXferParam>:
 210:	6f 92       	push	r6
 212:	7f 92       	push	r7
 214:	8f 92       	push	r8
 216:	9f 92       	push	r9
 218:	af 92       	push	r10
 21a:	bf 92       	push	r11
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	78 2e       	mov	r7, r24
 22e:	4a 01       	movw	r8, r20
 230:	5b 01       	movw	r10, r22
 232:	62 2e       	mov	r6, r18
 234:	02 2f       	mov	r16, r18
 236:	06 95       	lsr	r16
 238:	06 95       	lsr	r16
 23a:	06 95       	lsr	r16
 23c:	82 2f       	mov	r24, r18
 23e:	87 70       	andi	r24, 0x07	; 7
 240:	09 f0       	breq	.+2      	; 0x244 <SPIXferParam+0x34>
 242:	0f 5f       	subi	r16, 0xFF	; 255
 244:	00 23       	and	r16, r16
 246:	41 f1       	breq	.+80     	; 0x298 <SPIXferParam+0x88>
 248:	c0 2f       	mov	r28, r16
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	21 97       	sbiw	r28, 0x01	; 1
 24e:	cc 0f       	add	r28, r28
 250:	dd 1f       	adc	r29, r29
 252:	cc 0f       	add	r28, r28
 254:	dd 1f       	adc	r29, r29
 256:	cc 0f       	add	r28, r28
 258:	dd 1f       	adc	r29, r29
 25a:	10 e0       	ldi	r17, 0x00	; 0
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	dc 01       	movw	r26, r24
 262:	cc 24       	eor	r12, r12
 264:	d8 2e       	mov	r13, r24
 266:	e9 2e       	mov	r14, r25
 268:	fa 2e       	mov	r15, r26
 26a:	c5 01       	movw	r24, r10
 26c:	b4 01       	movw	r22, r8
 26e:	0c 2e       	mov	r0, r28
 270:	04 c0       	rjmp	.+8      	; 0x27a <SPIXferParam+0x6a>
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	77 95       	ror	r23
 278:	67 95       	ror	r22
 27a:	0a 94       	dec	r0
 27c:	d2 f7       	brpl	.-12     	; 0x272 <SPIXferParam+0x62>
 27e:	87 2d       	mov	r24, r7
 280:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 284:	a7 01       	movw	r20, r14
 286:	96 01       	movw	r18, r12
 288:	28 2b       	or	r18, r24
 28a:	da 01       	movw	r26, r20
 28c:	c9 01       	movw	r24, r18
 28e:	1f 5f       	subi	r17, 0xFF	; 255
 290:	28 97       	sbiw	r28, 0x08	; 8
 292:	01 13       	cpse	r16, r17
 294:	e6 cf       	rjmp	.-52     	; 0x262 <SPIXferParam+0x52>
 296:	03 c0       	rjmp	.+6      	; 0x29e <SPIXferParam+0x8e>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	dc 01       	movw	r26, r24
 29e:	20 e2       	ldi	r18, 0x20	; 32
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	26 19       	sub	r18, r6
 2a4:	31 09       	sbc	r19, r1
 2a6:	4f ef       	ldi	r20, 0xFF	; 255
 2a8:	5f ef       	ldi	r21, 0xFF	; 255
 2aa:	ba 01       	movw	r22, r20
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <SPIXferParam+0xa6>
 2ae:	76 95       	lsr	r23
 2b0:	67 95       	ror	r22
 2b2:	57 95       	ror	r21
 2b4:	47 95       	ror	r20
 2b6:	2a 95       	dec	r18
 2b8:	d2 f7       	brpl	.-12     	; 0x2ae <SPIXferParam+0x9e>
 2ba:	8a 01       	movw	r16, r20
 2bc:	9b 01       	movw	r18, r22
 2be:	08 23       	and	r16, r24
 2c0:	19 23       	and	r17, r25
 2c2:	2a 23       	and	r18, r26
 2c4:	3b 23       	and	r19, r27
 2c6:	c9 01       	movw	r24, r18
 2c8:	b8 01       	movw	r22, r16
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	ff 90       	pop	r15
 2d4:	ef 90       	pop	r14
 2d6:	df 90       	pop	r13
 2d8:	cf 90       	pop	r12
 2da:	bf 90       	pop	r11
 2dc:	af 90       	pop	r10
 2de:	9f 90       	pop	r9
 2e0:	8f 90       	pop	r8
 2e2:	7f 90       	pop	r7
 2e4:	6f 90       	pop	r6
 2e6:	08 95       	ret

000002e8 <getStatus>:
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	18 2f       	mov	r17, r24
 2f0:	60 ed       	ldi	r22, 0xD0	; 208
 2f2:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	81 2f       	mov	r24, r17
 2fa:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 2fe:	c8 2f       	mov	r28, r24
 300:	d0 e0       	ldi	r29, 0x00	; 0
 302:	dc 2f       	mov	r29, r28
 304:	cc 27       	eor	r28, r28
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	81 2f       	mov	r24, r17
 30a:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 30e:	9e 01       	movw	r18, r28
 310:	28 2b       	or	r18, r24
 312:	c9 01       	movw	r24, r18
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	08 95       	ret

0000031c <powerSTEP01_GPIO_Init>:
 31c:	20 9a       	sbi	0x04, 0	; 4
 31e:	28 9a       	sbi	0x05, 0	; 5
 320:	87 b1       	in	r24, 0x07	; 7
 322:	87 b9       	out	0x07, r24	; 7
 324:	88 b1       	in	r24, 0x08	; 8
 326:	80 6c       	ori	r24, 0xC0	; 192
 328:	88 b9       	out	0x08, r24	; 8
 32a:	6e 9a       	sbi	0x0d, 6	; 13
 32c:	76 98       	cbi	0x0e, 6	; 14
 32e:	08 95       	ret

00000330 <releaseReset>:
 330:	76 9a       	sbi	0x0e, 6	; 14
 332:	08 95       	ret

00000334 <paramHandler>:
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	e6 2f       	mov	r30, r22
 33a:	ba 01       	movw	r22, r20
 33c:	a9 01       	movw	r20, r18
 33e:	0e 2f       	mov	r16, r30
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	f8 01       	movw	r30, r16
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	eb 31       	cpi	r30, 0x1B	; 27
 348:	f1 05       	cpc	r31, r1
 34a:	08 f0       	brcs	.+2      	; 0x34e <paramHandler+0x1a>
 34c:	82 c0       	rjmp	.+260    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 34e:	ea 5a       	subi	r30, 0xAA	; 170
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__tablejump2__>
 356:	26 e1       	ldi	r18, 0x16	; 22
 358:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 35c:	80 c0       	rjmp	.+256    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 35e:	29 e0       	ldi	r18, 0x09	; 9
 360:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 364:	7c c0       	rjmp	.+248    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 366:	26 e1       	ldi	r18, 0x16	; 22
 368:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 36c:	78 c0       	rjmp	.+240    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 36e:	24 e1       	ldi	r18, 0x14	; 20
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	ba 01       	movw	r22, r20
 376:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 37a:	71 c0       	rjmp	.+226    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 37c:	2c e0       	ldi	r18, 0x0C	; 12
 37e:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 382:	6d c0       	rjmp	.+218    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 384:	2c e0       	ldi	r18, 0x0C	; 12
 386:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 38a:	69 c0       	rjmp	.+210    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 38c:	2a e0       	ldi	r18, 0x0A	; 10
 38e:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 392:	65 c0       	rjmp	.+202    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 394:	2d e0       	ldi	r18, 0x0D	; 13
 396:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 39a:	61 c0       	rjmp	.+194    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 39c:	2a e0       	ldi	r18, 0x0A	; 10
 39e:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3a2:	5d c0       	rjmp	.+186    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3a4:	28 e0       	ldi	r18, 0x08	; 8
 3a6:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3aa:	59 c0       	rjmp	.+178    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3ac:	28 e0       	ldi	r18, 0x08	; 8
 3ae:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3b2:	55 c0       	rjmp	.+170    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3b4:	28 e0       	ldi	r18, 0x08	; 8
 3b6:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3ba:	51 c0       	rjmp	.+162    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3bc:	28 e0       	ldi	r18, 0x08	; 8
 3be:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3c2:	4d c0       	rjmp	.+154    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3c4:	2e e0       	ldi	r18, 0x0E	; 14
 3c6:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3ca:	49 c0       	rjmp	.+146    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3cc:	28 e0       	ldi	r18, 0x08	; 8
 3ce:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3d2:	45 c0       	rjmp	.+138    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3d4:	28 e0       	ldi	r18, 0x08	; 8
 3d6:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3da:	41 c0       	rjmp	.+130    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3dc:	28 e0       	ldi	r18, 0x08	; 8
 3de:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3e2:	3d c0       	rjmp	.+122    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3e4:	4f 70       	andi	r20, 0x0F	; 15
 3e6:	55 27       	eor	r21, r21
 3e8:	66 27       	eor	r22, r22
 3ea:	77 27       	eor	r23, r23
 3ec:	28 e0       	ldi	r18, 0x08	; 8
 3ee:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3f2:	35 c0       	rjmp	.+106    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3f4:	28 e0       	ldi	r18, 0x08	; 8
 3f6:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 3fa:	31 c0       	rjmp	.+98     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3fc:	4f 71       	andi	r20, 0x1F	; 31
 3fe:	55 27       	eor	r21, r21
 400:	66 27       	eor	r22, r22
 402:	77 27       	eor	r23, r23
 404:	28 e0       	ldi	r18, 0x08	; 8
 406:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 40a:	29 c0       	rjmp	.+82     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 40c:	4f 71       	andi	r20, 0x1F	; 31
 40e:	55 27       	eor	r21, r21
 410:	66 27       	eor	r22, r22
 412:	77 27       	eor	r23, r23
 414:	28 e0       	ldi	r18, 0x08	; 8
 416:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 41a:	21 c0       	rjmp	.+66     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 41c:	28 e0       	ldi	r18, 0x08	; 8
 41e:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 422:	1d c0       	rjmp	.+58     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 424:	28 e0       	ldi	r18, 0x08	; 8
 426:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 42a:	19 c0       	rjmp	.+50     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 42c:	20 e1       	ldi	r18, 0x10	; 16
 42e:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 432:	15 c0       	rjmp	.+42     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 434:	28 e0       	ldi	r18, 0x08	; 8
 436:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 43a:	11 c0       	rjmp	.+34     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 43c:	20 e1       	ldi	r18, 0x10	; 16
 43e:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 442:	0d c0       	rjmp	.+26     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 444:	20 e1       	ldi	r18, 0x10	; 16
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	ba 01       	movw	r22, r20
 44c:	0e 94 08 01 	call	0x210	; 0x210 <SPIXferParam>
 450:	06 c0       	rjmp	.+12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 452:	64 2f       	mov	r22, r20
 454:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	cb 01       	movw	r24, r22
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <setParam>:
 464:	cf 92       	push	r12
 466:	df 92       	push	r13
 468:	ef 92       	push	r14
 46a:	ff 92       	push	r15
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	c8 2f       	mov	r28, r24
 472:	d6 2f       	mov	r29, r22
 474:	69 01       	movw	r12, r18
 476:	7a 01       	movw	r14, r20
 478:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 47c:	a7 01       	movw	r20, r14
 47e:	96 01       	movw	r18, r12
 480:	6d 2f       	mov	r22, r29
 482:	8c 2f       	mov	r24, r28
 484:	0e 94 9a 01 	call	0x334	; 0x334 <paramHandler>
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	ff 90       	pop	r15
 48e:	ef 90       	pop	r14
 490:	df 90       	pop	r13
 492:	cf 90       	pop	r12
 494:	08 95       	ret

00000496 <setRunKval>:
 496:	26 2f       	mov	r18, r22
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	6a e0       	ldi	r22, 0x0A	; 10
 4a0:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 4a4:	08 95       	ret

000004a6 <setHoldKval>:
 4a6:	26 2f       	mov	r18, r22
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 e0       	ldi	r20, 0x00	; 0
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	69 e0       	ldi	r22, 0x09	; 9
 4b0:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 4b4:	08 95       	ret

000004b6 <setAccKval>:
 4b6:	26 2f       	mov	r18, r22
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	6b e0       	ldi	r22, 0x0B	; 11
 4c0:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 4c4:	08 95       	ret

000004c6 <setDecKval>:
 4c6:	26 2f       	mov	r18, r22
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	6c e0       	ldi	r22, 0x0C	; 12
 4d0:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 4d4:	08 95       	ret

000004d6 <setOCD_TH>:
 4d6:	26 2f       	mov	r18, r22
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	63 e1       	ldi	r22, 0x13	; 19
 4e0:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 4e4:	08 95       	ret

000004e6 <setSTALL_TH>:
 4e6:	26 2f       	mov	r18, r22
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	40 e0       	ldi	r20, 0x00	; 0
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	64 e1       	ldi	r22, 0x14	; 20
 4f0:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 4f4:	08 95       	ret

000004f6 <setAcc>:
 4f6:	cf 93       	push	r28
 4f8:	c8 2f       	mov	r28, r24
 4fa:	cb 01       	movw	r24, r22
 4fc:	ba 01       	movw	r22, r20
 4fe:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__floatunsisf>
 502:	2c e8       	ldi	r18, 0x8C	; 140
 504:	3c eb       	ldi	r19, 0xBC	; 188
 506:	4c e0       	ldi	r20, 0x0C	; 12
 508:	5e e3       	ldi	r21, 0x3E	; 62
 50a:	0e 94 d4 05 	call	0xba8	; 0xba8 <__mulsf3>
 50e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fixunssfsi>
 512:	9b 01       	movw	r18, r22
 514:	ac 01       	movw	r20, r24
 516:	21 15       	cp	r18, r1
 518:	80 e1       	ldi	r24, 0x10	; 16
 51a:	38 07       	cpc	r19, r24
 51c:	41 05       	cpc	r20, r1
 51e:	51 05       	cpc	r21, r1
 520:	20 f0       	brcs	.+8      	; 0x52a <setAcc+0x34>
 522:	2f ef       	ldi	r18, 0xFF	; 255
 524:	3f e0       	ldi	r19, 0x0F	; 15
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	65 e0       	ldi	r22, 0x05	; 5
 52c:	8c 2f       	mov	r24, r28
 52e:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <setDec>:
 536:	cf 93       	push	r28
 538:	c8 2f       	mov	r28, r24
 53a:	cb 01       	movw	r24, r22
 53c:	ba 01       	movw	r22, r20
 53e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__floatunsisf>
 542:	2c e8       	ldi	r18, 0x8C	; 140
 544:	3c eb       	ldi	r19, 0xBC	; 188
 546:	4c e0       	ldi	r20, 0x0C	; 12
 548:	5e e3       	ldi	r21, 0x3E	; 62
 54a:	0e 94 d4 05 	call	0xba8	; 0xba8 <__mulsf3>
 54e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fixunssfsi>
 552:	9b 01       	movw	r18, r22
 554:	ac 01       	movw	r20, r24
 556:	21 15       	cp	r18, r1
 558:	80 e1       	ldi	r24, 0x10	; 16
 55a:	38 07       	cpc	r19, r24
 55c:	41 05       	cpc	r20, r1
 55e:	51 05       	cpc	r21, r1
 560:	20 f0       	brcs	.+8      	; 0x56a <setDec+0x34>
 562:	2f ef       	ldi	r18, 0xFF	; 255
 564:	3f e0       	ldi	r19, 0x0F	; 15
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	66 e0       	ldi	r22, 0x06	; 6
 56c:	8c 2f       	mov	r24, r28
 56e:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <getParam>:
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	c8 2f       	mov	r28, r24
 57c:	d6 2f       	mov	r29, r22
 57e:	60 62       	ori	r22, 0x20	; 32
 580:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	a9 01       	movw	r20, r18
 58a:	6d 2f       	mov	r22, r29
 58c:	8c 2f       	mov	r24, r28
 58e:	0e 94 9a 01 	call	0x334	; 0x334 <paramHandler>
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	08 95       	ret

00000598 <setOscMode>:
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	18 2f       	mov	r17, r24
 5a0:	eb 01       	movw	r28, r22
 5a2:	6a e1       	ldi	r22, 0x1A	; 26
 5a4:	0e 94 bb 02 	call	0x576	; 0x576 <getParam>
 5a8:	dc 01       	movw	r26, r24
 5aa:	cb 01       	movw	r24, r22
 5ac:	80 7f       	andi	r24, 0xF0	; 240
 5ae:	cf 70       	andi	r28, 0x0F	; 15
 5b0:	dd 27       	eor	r29, r29
 5b2:	ae 01       	movw	r20, r28
 5b4:	dd 0f       	add	r29, r29
 5b6:	66 0b       	sbc	r22, r22
 5b8:	77 0b       	sbc	r23, r23
 5ba:	9a 01       	movw	r18, r20
 5bc:	ab 01       	movw	r20, r22
 5be:	28 2b       	or	r18, r24
 5c0:	39 2b       	or	r19, r25
 5c2:	4a 2b       	or	r20, r26
 5c4:	5b 2b       	or	r21, r27
 5c6:	6a e1       	ldi	r22, 0x1A	; 26
 5c8:	81 2f       	mov	r24, r17
 5ca:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	08 95       	ret

000005d6 <setSwitchMode>:
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	18 2f       	mov	r17, r24
 5de:	eb 01       	movw	r28, r22
 5e0:	6a e1       	ldi	r22, 0x1A	; 26
 5e2:	0e 94 bb 02 	call	0x576	; 0x576 <getParam>
 5e6:	dc 01       	movw	r26, r24
 5e8:	cb 01       	movw	r24, r22
 5ea:	8f 7e       	andi	r24, 0xEF	; 239
 5ec:	c0 71       	andi	r28, 0x10	; 16
 5ee:	dd 27       	eor	r29, r29
 5f0:	ae 01       	movw	r20, r28
 5f2:	dd 0f       	add	r29, r29
 5f4:	66 0b       	sbc	r22, r22
 5f6:	77 0b       	sbc	r23, r23
 5f8:	9a 01       	movw	r18, r20
 5fa:	ab 01       	movw	r20, r22
 5fc:	28 2b       	or	r18, r24
 5fe:	39 2b       	or	r19, r25
 600:	4a 2b       	or	r20, r26
 602:	5b 2b       	or	r21, r27
 604:	6a e1       	ldi	r22, 0x1A	; 26
 606:	81 2f       	mov	r24, r17
 608:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	08 95       	ret

00000614 <setVoltageComp>:
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	18 2f       	mov	r17, r24
 61c:	eb 01       	movw	r28, r22
 61e:	6a e1       	ldi	r22, 0x1A	; 26
 620:	0e 94 bb 02 	call	0x576	; 0x576 <getParam>
 624:	dc 01       	movw	r26, r24
 626:	cb 01       	movw	r24, r22
 628:	8f 7d       	andi	r24, 0xDF	; 223
 62a:	c0 72       	andi	r28, 0x20	; 32
 62c:	dd 27       	eor	r29, r29
 62e:	ae 01       	movw	r20, r28
 630:	dd 0f       	add	r29, r29
 632:	66 0b       	sbc	r22, r22
 634:	77 0b       	sbc	r23, r23
 636:	9a 01       	movw	r18, r20
 638:	ab 01       	movw	r20, r22
 63a:	28 2b       	or	r18, r24
 63c:	39 2b       	or	r19, r25
 63e:	4a 2b       	or	r20, r26
 640:	5b 2b       	or	r21, r27
 642:	6a e1       	ldi	r22, 0x1A	; 26
 644:	81 2f       	mov	r24, r17
 646:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	1f 91       	pop	r17
 650:	08 95       	ret

00000652 <setPWMFreq>:
 652:	cf 93       	push	r28
 654:	c8 2f       	mov	r28, r24
 656:	6a e1       	ldi	r22, 0x1A	; 26
 658:	0e 94 bb 02 	call	0x576	; 0x576 <getParam>
 65c:	9b 01       	movw	r18, r22
 65e:	ac 01       	movw	r20, r24
 660:	33 70       	andi	r19, 0x03	; 3
 662:	44 27       	eor	r20, r20
 664:	55 27       	eor	r21, r21
 666:	6a e1       	ldi	r22, 0x1A	; 26
 668:	8c 2f       	mov	r24, r28
 66a:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <setOCShutdown>:
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	d8 2f       	mov	r29, r24
 678:	c6 2f       	mov	r28, r22
 67a:	6a e1       	ldi	r22, 0x1A	; 26
 67c:	0e 94 bb 02 	call	0x576	; 0x576 <getParam>
 680:	dc 01       	movw	r26, r24
 682:	cb 01       	movw	r24, r22
 684:	8f 77       	andi	r24, 0x7F	; 127
 686:	c0 78       	andi	r28, 0x80	; 128
 688:	9c 01       	movw	r18, r24
 68a:	ad 01       	movw	r20, r26
 68c:	2c 2b       	or	r18, r28
 68e:	6a e1       	ldi	r22, 0x1A	; 26
 690:	8d 2f       	mov	r24, r29
 692:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	08 95       	ret

0000069c <configStepMode>:
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	d8 2f       	mov	r29, r24
 6a2:	c6 2f       	mov	r28, r22
 6a4:	66 e1       	ldi	r22, 0x16	; 22
 6a6:	0e 94 bb 02 	call	0x576	; 0x576 <getParam>
 6aa:	2c 2f       	mov	r18, r28
 6ac:	27 70       	andi	r18, 0x07	; 7
 6ae:	68 7f       	andi	r22, 0xF8	; 248
 6b0:	26 2b       	or	r18, r22
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	66 e1       	ldi	r22, 0x16	; 22
 6ba:	8d 2f       	mov	r24, r29
 6bc:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <setSlewRate>:
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	c8 2f       	mov	r28, r24
 6cc:	d6 2f       	mov	r29, r22
 6ce:	68 e1       	ldi	r22, 0x18	; 24
 6d0:	0e 94 bb 02 	call	0x576	; 0x576 <getParam>
 6d4:	dc 01       	movw	r26, r24
 6d6:	cb 01       	movw	r24, r22
 6d8:	88 27       	eor	r24, r24
 6da:	aa 27       	eor	r26, r26
 6dc:	bb 27       	eor	r27, r27
 6de:	9c 01       	movw	r18, r24
 6e0:	ad 01       	movw	r20, r26
 6e2:	2d 2b       	or	r18, r29
 6e4:	68 e1       	ldi	r22, 0x18	; 24
 6e6:	8c 2f       	mov	r24, r28
 6e8:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <maxSpdCalc>:
 6f2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__floatunsisf>
 6f6:	2d eb       	ldi	r18, 0xBD	; 189
 6f8:	37 e3       	ldi	r19, 0x37	; 55
 6fa:	46 e8       	ldi	r20, 0x86	; 134
 6fc:	5d e3       	ldi	r21, 0x3D	; 61
 6fe:	0e 94 d4 05 	call	0xba8	; 0xba8 <__mulsf3>
 702:	0e 94 e7 04 	call	0x9ce	; 0x9ce <ceil>
 706:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fixunssfsi>
 70a:	61 15       	cp	r22, r1
 70c:	24 e0       	ldi	r18, 0x04	; 4
 70e:	72 07       	cpc	r23, r18
 710:	81 05       	cpc	r24, r1
 712:	91 05       	cpc	r25, r1
 714:	20 f0       	brcs	.+8      	; 0x71e <maxSpdCalc+0x2c>
 716:	6f ef       	ldi	r22, 0xFF	; 255
 718:	73 e0       	ldi	r23, 0x03	; 3
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	08 95       	ret

00000720 <setMaxSpeed>:
 720:	cf 93       	push	r28
 722:	c8 2f       	mov	r28, r24
 724:	cb 01       	movw	r24, r22
 726:	ba 01       	movw	r22, r20
 728:	0e 94 79 03 	call	0x6f2	; 0x6f2 <maxSpdCalc>
 72c:	9b 01       	movw	r18, r22
 72e:	ac 01       	movw	r20, r24
 730:	67 e0       	ldi	r22, 0x07	; 7
 732:	8c 2f       	mov	r24, r28
 734:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <busyCheck>:
 73c:	6b e1       	ldi	r22, 0x1B	; 27
 73e:	0e 94 bb 02 	call	0x576	; 0x576 <getParam>
 742:	dc 01       	movw	r26, r24
 744:	cb 01       	movw	r24, r22
 746:	b6 95       	lsr	r27
 748:	a7 95       	ror	r26
 74a:	97 95       	ror	r25
 74c:	87 95       	ror	r24
 74e:	21 e0       	ldi	r18, 0x01	; 1
 750:	82 27       	eor	r24, r18
 752:	81 70       	andi	r24, 0x01	; 1
 754:	99 27       	eor	r25, r25
 756:	08 95       	ret

00000758 <motorControl_Init>:
 758:	0f 93       	push	r16
 75a:	1f 93       	push	r17
 75c:	cf 93       	push	r28
 75e:	c8 2f       	mov	r28, r24
 760:	8c 2f       	mov	r24, r28
 762:	0e 94 9e 03 	call	0x73c	; 0x73c <busyCheck>
 766:	89 2b       	or	r24, r25
 768:	d9 f7       	brne	.-10     	; 0x760 <motorControl_Init+0x8>
 76a:	00 e0       	ldi	r16, 0x00	; 0
 76c:	11 e0       	ldi	r17, 0x01	; 1
 76e:	80 e3       	ldi	r24, 0x30	; 48
 770:	f8 01       	movw	r30, r16
 772:	80 83       	st	Z, r24
 774:	81 83       	std	Z+1, r24	; 0x01
 776:	82 83       	std	Z+2, r24	; 0x02
 778:	83 83       	std	Z+3, r24	; 0x03
 77a:	88 ec       	ldi	r24, 0xC8	; 200
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	a0 e0       	ldi	r26, 0x00	; 0
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	84 83       	std	Z+4, r24	; 0x04
 784:	95 83       	std	Z+5, r25	; 0x05
 786:	a6 83       	std	Z+6, r26	; 0x06
 788:	b7 83       	std	Z+7, r27	; 0x07
 78a:	84 e6       	ldi	r24, 0x64	; 100
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	a0 e0       	ldi	r26, 0x00	; 0
 790:	b0 e0       	ldi	r27, 0x00	; 0
 792:	80 87       	std	Z+8, r24	; 0x08
 794:	91 87       	std	Z+9, r25	; 0x09
 796:	a2 87       	std	Z+10, r26	; 0x0a
 798:	b3 87       	std	Z+11, r27	; 0x0b
 79a:	84 87       	std	Z+12, r24	; 0x0c
 79c:	95 87       	std	Z+13, r25	; 0x0d
 79e:	a6 87       	std	Z+14, r26	; 0x0e
 7a0:	b7 87       	std	Z+15, r27	; 0x0f
 7a2:	0e 94 8e 01 	call	0x31c	; 0x31c <powerSTEP01_GPIO_Init>
 7a6:	0e 94 98 01 	call	0x330	; 0x330 <releaseReset>
 7aa:	8f e9       	ldi	r24, 0x9F	; 159
 7ac:	9f e0       	ldi	r25, 0x0F	; 15
 7ae:	01 97       	sbiw	r24, 0x01	; 1
 7b0:	f1 f7       	brne	.-4      	; 0x7ae <motorControl_Init+0x56>
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <motorControl_Init+0x5c>
 7b4:	00 00       	nop
 7b6:	28 98       	cbi	0x05, 0	; 5
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
 7ca:	28 9a       	sbi	0x05, 0	; 5
 7cc:	6a e1       	ldi	r22, 0x1A	; 26
 7ce:	8c 2f       	mov	r24, r28
 7d0:	0e 94 bb 02 	call	0x576	; 0x576 <getParam>
 7d4:	66 ea       	ldi	r22, 0xA6	; 166
 7d6:	8c 2f       	mov	r24, r28
 7d8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <setSlewRate>
 7dc:	67 e0       	ldi	r22, 0x07	; 7
 7de:	8c 2f       	mov	r24, r28
 7e0:	0e 94 4e 03 	call	0x69c	; 0x69c <configStepMode>
 7e4:	6f e1       	ldi	r22, 0x1F	; 31
 7e6:	8c 2f       	mov	r24, r28
 7e8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <setOCD_TH>
 7ec:	60 e8       	ldi	r22, 0x80	; 128
 7ee:	8c 2f       	mov	r24, r28
 7f0:	0e 94 39 03 	call	0x672	; 0x672 <setOCShutdown>
 7f4:	40 e0       	ldi	r20, 0x00	; 0
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	8c 2f       	mov	r24, r28
 7fa:	0e 94 29 03 	call	0x652	; 0x652 <setPWMFreq>
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	8c 2f       	mov	r24, r28
 804:	0e 94 0a 03 	call	0x614	; 0x614 <setVoltageComp>
 808:	60 e1       	ldi	r22, 0x10	; 16
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	8c 2f       	mov	r24, r28
 80e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <setSwitchMode>
 812:	6a e0       	ldi	r22, 0x0A	; 10
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	8c 2f       	mov	r24, r28
 818:	0e 94 cc 02 	call	0x598	; 0x598 <setOscMode>
 81c:	60 e1       	ldi	r22, 0x10	; 16
 81e:	8c 2f       	mov	r24, r28
 820:	0e 94 73 02 	call	0x4e6	; 0x4e6 <setSTALL_TH>
 824:	f8 01       	movw	r30, r16
 826:	44 81       	ldd	r20, Z+4	; 0x04
 828:	55 81       	ldd	r21, Z+5	; 0x05
 82a:	66 81       	ldd	r22, Z+6	; 0x06
 82c:	77 81       	ldd	r23, Z+7	; 0x07
 82e:	8c 2f       	mov	r24, r28
 830:	0e 94 90 03 	call	0x720	; 0x720 <setMaxSpeed>
 834:	f8 01       	movw	r30, r16
 836:	60 81       	ld	r22, Z
 838:	8c 2f       	mov	r24, r28
 83a:	0e 94 4b 02 	call	0x496	; 0x496 <setRunKval>
 83e:	f8 01       	movw	r30, r16
 840:	61 81       	ldd	r22, Z+1	; 0x01
 842:	8c 2f       	mov	r24, r28
 844:	0e 94 53 02 	call	0x4a6	; 0x4a6 <setHoldKval>
 848:	f8 01       	movw	r30, r16
 84a:	62 81       	ldd	r22, Z+2	; 0x02
 84c:	8c 2f       	mov	r24, r28
 84e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <setAccKval>
 852:	f8 01       	movw	r30, r16
 854:	63 81       	ldd	r22, Z+3	; 0x03
 856:	8c 2f       	mov	r24, r28
 858:	0e 94 63 02 	call	0x4c6	; 0x4c6 <setDecKval>
 85c:	f8 01       	movw	r30, r16
 85e:	40 85       	ldd	r20, Z+8	; 0x08
 860:	51 85       	ldd	r21, Z+9	; 0x09
 862:	62 85       	ldd	r22, Z+10	; 0x0a
 864:	73 85       	ldd	r23, Z+11	; 0x0b
 866:	8c 2f       	mov	r24, r28
 868:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <setAcc>
 86c:	f8 01       	movw	r30, r16
 86e:	44 85       	ldd	r20, Z+12	; 0x0c
 870:	55 85       	ldd	r21, Z+13	; 0x0d
 872:	66 85       	ldd	r22, Z+14	; 0x0e
 874:	77 85       	ldd	r23, Z+15	; 0x0f
 876:	8c 2f       	mov	r24, r28
 878:	0e 94 9b 02 	call	0x536	; 0x536 <setDec>
 87c:	2f ea       	ldi	r18, 0xAF	; 175
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	40 e0       	ldi	r20, 0x00	; 0
 882:	50 e0       	ldi	r21, 0x00	; 0
 884:	67 e1       	ldi	r22, 0x17	; 23
 886:	8c 2f       	mov	r24, r28
 888:	0e 94 32 02 	call	0x464	; 0x464 <setParam>
 88c:	8c 2f       	mov	r24, r28
 88e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <getStatus>
 892:	cf 91       	pop	r28
 894:	1f 91       	pop	r17
 896:	0f 91       	pop	r16
 898:	08 95       	ret

0000089a <move>:

void move(uint8_t motor, uint8_t dir, unsigned long numSteps)
{	
 89a:	0f 93       	push	r16
 89c:	1f 93       	push	r17
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	00 d0       	rcall	.+0      	; 0x8a4 <move+0xa>
 8a4:	00 d0       	rcall	.+0      	; 0x8a6 <move+0xc>
 8a6:	cd b7       	in	r28, 0x3d	; 61
 8a8:	de b7       	in	r29, 0x3e	; 62
 8aa:	18 2f       	mov	r17, r24
 8ac:	06 2f       	mov	r16, r22
 8ae:	29 83       	std	Y+1, r18	; 0x01
 8b0:	3a 83       	std	Y+2, r19	; 0x02
 8b2:	4b 83       	std	Y+3, r20	; 0x03
 8b4:	5c 83       	std	Y+4, r21	; 0x04
	while(busyCheck(motor));
 8b6:	81 2f       	mov	r24, r17
 8b8:	0e 94 9e 03 	call	0x73c	; 0x73c <busyCheck>
 8bc:	89 2b       	or	r24, r25
 8be:	d9 f7       	brne	.-10     	; 0x8b6 <move+0x1c>
	SPIXferMotors(motor, (MOVE | (0x01 & dir)));
 8c0:	60 2f       	mov	r22, r16
 8c2:	61 70       	andi	r22, 0x01	; 1
 8c4:	60 64       	ori	r22, 0x40	; 64
 8c6:	81 2f       	mov	r24, r17
 8c8:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
	if (numSteps > 0x3FFFFF) numSteps = 0x3FFFFF;
 8cc:	89 81       	ldd	r24, Y+1	; 0x01
 8ce:	9a 81       	ldd	r25, Y+2	; 0x02
 8d0:	ab 81       	ldd	r26, Y+3	; 0x03
 8d2:	bc 81       	ldd	r27, Y+4	; 0x04
 8d4:	00 97       	sbiw	r24, 0x00	; 0
 8d6:	a0 44       	sbci	r26, 0x40	; 64
 8d8:	b1 05       	cpc	r27, r1
 8da:	40 f0       	brcs	.+16     	; 0x8ec <move+0x52>
 8dc:	8f ef       	ldi	r24, 0xFF	; 255
 8de:	9f ef       	ldi	r25, 0xFF	; 255
 8e0:	af e3       	ldi	r26, 0x3F	; 63
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	89 83       	std	Y+1, r24	; 0x01
 8e6:	9a 83       	std	Y+2, r25	; 0x02
 8e8:	ab 83       	std	Y+3, r26	; 0x03
 8ea:	bc 83       	std	Y+4, r27	; 0x04

	uint8_t* bytePointer = (uint8_t*)&numSteps;
	
	for (int8_t i = 2; i >= 0; i--)
	{
		SPIXferMotors(motor, bytePointer[i]);
 8ec:	6b 81       	ldd	r22, Y+3	; 0x03
 8ee:	81 2f       	mov	r24, r17
 8f0:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 8f4:	6a 81       	ldd	r22, Y+2	; 0x02
 8f6:	81 2f       	mov	r24, r17
 8f8:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 8fc:	69 81       	ldd	r22, Y+1	; 0x01
 8fe:	81 2f       	mov	r24, r17
 900:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
	}
}
 904:	0f 90       	pop	r0
 906:	0f 90       	pop	r0
 908:	0f 90       	pop	r0
 90a:	0f 90       	pop	r0
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	08 95       	ret

00000916 <PWMinit>:

#include "PWM.h"

void PWMinit(void)
{
	DDRB |= (1<<PORTB7);
 916:	27 9a       	sbi	0x04, 7	; 4
	TCCR0A |= (1<<COM0A1)|(1<<WGM00)|(1<<WGM01);
 918:	84 b5       	in	r24, 0x24	; 36
 91a:	83 68       	ori	r24, 0x83	; 131
 91c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);
 91e:	85 b5       	in	r24, 0x25	; 37
 920:	81 60       	ori	r24, 0x01	; 1
 922:	85 bd       	out	0x25, r24	; 37
 924:	08 95       	ret

00000926 <SPI_Init>:
* Deinitializes the SPI controller
*/
void SPIdeInit(void)
{
	//disable SPI
	SPCR &= ~(1<<SPE);
 926:	84 b1       	in	r24, 0x04	; 4
 928:	86 60       	ori	r24, 0x06	; 6
 92a:	84 b9       	out	0x04, r24	; 4
 92c:	8c b5       	in	r24, 0x2c	; 44
 92e:	8d 65       	ori	r24, 0x5D	; 93
 930:	8c bd       	out	0x2c, r24	; 44
 932:	8d b5       	in	r24, 0x2d	; 45
 934:	81 60       	ori	r24, 0x01	; 1
 936:	8d bd       	out	0x2d, r24	; 45
 938:	08 95       	ret

0000093a <transfer>:
/*
* Transfers one byte over the SPI bus
*/
uint8_t transfer(uint8_t data)
{
	SPDR = data;
 93a:	8e bd       	out	0x2e, r24	; 46
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
	 * information from Arduino SPI.h library
     */
	_NOP();
 93c:	00 00       	nop
	
	//wait for transmission to end
	while(!(SPSR & (1<<SPIF)));
 93e:	0d b4       	in	r0, 0x2d	; 45
 940:	07 fe       	sbrs	r0, 7
 942:	fd cf       	rjmp	.-6      	; 0x93e <transfer+0x4>
	
	
	return SPDR;
 944:	8e b5       	in	r24, 0x2e	; 46
}
 946:	08 95       	ret

00000948 <timer_init>:

#include "Einderit.h"

void timer_init()
{
	TCCR1B |= (1 << CS11) | (1 << CS10);
 948:	e1 e8       	ldi	r30, 0x81	; 129
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	80 81       	ld	r24, Z
 94e:	83 60       	ori	r24, 0x03	; 3
 950:	80 83       	st	Z, r24
	TCNT1 = 0; // set timer counter initial value (16 bit value)
 952:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 956:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	// Interrupts on overflow (every ~1 second)
	OCR1A = 0x002E;
 95a:	8e e2       	ldi	r24, 0x2E	; 46
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 962:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TIMSK1 = 1 << OCIE1A; // enable timer compare match 1A interrupt
 966:	82 e0       	ldi	r24, 0x02	; 2
 968:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	sei(); // enable interrupts
 96c:	78 94       	sei
 96e:	08 95       	ret

00000970 <__vector_17>:
}

ISR(TIMER1_COMPA_vect) // 16 bit timer 1 compare 1A match
{
 970:	1f 92       	push	r1
 972:	0f 92       	push	r0
 974:	0f b6       	in	r0, 0x3f	; 63
 976:	0f 92       	push	r0
 978:	11 24       	eor	r1, r1
	//checken of-en welke einderit contacten actief zijn, zoja, overeenkomstigge motor stopzetten.
	//(reminder)check if interrupts will interrupt other functionality (probably will).
 97a:	0f 90       	pop	r0
 97c:	0f be       	out	0x3f, r0	; 63
 97e:	0f 90       	pop	r0
 980:	1f 90       	pop	r1
 982:	18 95       	reti

00000984 <main>:
#include "Library/Einderit/Einderit.h"
#include "Library/powerSTEP01/powerSTEP01.h"

int main(void)
{
	timer_init();
 984:	0e 94 a4 04 	call	0x948	; 0x948 <timer_init>
	SPI_Init();
 988:	0e 94 93 04 	call	0x926	; 0x926 <SPI_Init>
	motorControl_Init(1);
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	0e 94 ac 03 	call	0x758	; 0x758 <motorControl_Init>
	PWMinit();
 992:	0e 94 8b 04 	call	0x916	; 0x916 <PWMinit>
	ADCInit();
 996:	0e 94 85 00 	call	0x10a	; 0x10a <ADCInit>
	//getParam(1, STEP_MODE);
	
    while (1) 
    {
		//PWM_DutyCycle = (uint8_t)(getADC() >> 2);
		move(1, 1, 12800);
 99a:	20 e0       	ldi	r18, 0x00	; 0
 99c:	32 e3       	ldi	r19, 0x32	; 50
 99e:	40 e0       	ldi	r20, 0x00	; 0
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	61 e0       	ldi	r22, 0x01	; 1
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	0e 94 4d 04 	call	0x89a	; 0x89a <move>
		move(1, 0, 12800);
 9aa:	20 e0       	ldi	r18, 0x00	; 0
 9ac:	32 e3       	ldi	r19, 0x32	; 50
 9ae:	40 e0       	ldi	r20, 0x00	; 0
 9b0:	50 e0       	ldi	r21, 0x00	; 0
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	0e 94 4d 04 	call	0x89a	; 0x89a <move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9ba:	2f ef       	ldi	r18, 0xFF	; 255
 9bc:	81 e1       	ldi	r24, 0x11	; 17
 9be:	9a e7       	ldi	r25, 0x7A	; 122
 9c0:	21 50       	subi	r18, 0x01	; 1
 9c2:	80 40       	sbci	r24, 0x00	; 0
 9c4:	90 40       	sbci	r25, 0x00	; 0
 9c6:	e1 f7       	brne	.-8      	; 0x9c0 <main+0x3c>
 9c8:	00 c0       	rjmp	.+0      	; 0x9ca <main+0x46>
 9ca:	00 00       	nop
 9cc:	e6 cf       	rjmp	.-52     	; 0x99a <main+0x16>

000009ce <ceil>:
 9ce:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_trunc>
 9d2:	90 f0       	brcs	.+36     	; 0x9f8 <ceil+0x2a>
 9d4:	9f 37       	cpi	r25, 0x7F	; 127
 9d6:	48 f4       	brcc	.+18     	; 0x9ea <ceil+0x1c>
 9d8:	91 11       	cpse	r25, r1
 9da:	16 f4       	brtc	.+4      	; 0x9e0 <ceil+0x12>
 9dc:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_szero>
 9e0:	60 e0       	ldi	r22, 0x00	; 0
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	80 e8       	ldi	r24, 0x80	; 128
 9e6:	9f e3       	ldi	r25, 0x3F	; 63
 9e8:	08 95       	ret
 9ea:	26 f0       	brts	.+8      	; 0x9f4 <ceil+0x26>
 9ec:	1b 16       	cp	r1, r27
 9ee:	61 1d       	adc	r22, r1
 9f0:	71 1d       	adc	r23, r1
 9f2:	81 1d       	adc	r24, r1
 9f4:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_mintl>
 9f8:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_mpack>

000009fc <__fixunssfsi>:
 9fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_splitA>
 a00:	88 f0       	brcs	.+34     	; 0xa24 <__fixunssfsi+0x28>
 a02:	9f 57       	subi	r25, 0x7F	; 127
 a04:	98 f0       	brcs	.+38     	; 0xa2c <__fixunssfsi+0x30>
 a06:	b9 2f       	mov	r27, r25
 a08:	99 27       	eor	r25, r25
 a0a:	b7 51       	subi	r27, 0x17	; 23
 a0c:	b0 f0       	brcs	.+44     	; 0xa3a <__fixunssfsi+0x3e>
 a0e:	e1 f0       	breq	.+56     	; 0xa48 <__fixunssfsi+0x4c>
 a10:	66 0f       	add	r22, r22
 a12:	77 1f       	adc	r23, r23
 a14:	88 1f       	adc	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	1a f0       	brmi	.+6      	; 0xa20 <__fixunssfsi+0x24>
 a1a:	ba 95       	dec	r27
 a1c:	c9 f7       	brne	.-14     	; 0xa10 <__fixunssfsi+0x14>
 a1e:	14 c0       	rjmp	.+40     	; 0xa48 <__fixunssfsi+0x4c>
 a20:	b1 30       	cpi	r27, 0x01	; 1
 a22:	91 f0       	breq	.+36     	; 0xa48 <__fixunssfsi+0x4c>
 a24:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_zero>
 a28:	b1 e0       	ldi	r27, 0x01	; 1
 a2a:	08 95       	ret
 a2c:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_zero>
 a30:	67 2f       	mov	r22, r23
 a32:	78 2f       	mov	r23, r24
 a34:	88 27       	eor	r24, r24
 a36:	b8 5f       	subi	r27, 0xF8	; 248
 a38:	39 f0       	breq	.+14     	; 0xa48 <__fixunssfsi+0x4c>
 a3a:	b9 3f       	cpi	r27, 0xF9	; 249
 a3c:	cc f3       	brlt	.-14     	; 0xa30 <__fixunssfsi+0x34>
 a3e:	86 95       	lsr	r24
 a40:	77 95       	ror	r23
 a42:	67 95       	ror	r22
 a44:	b3 95       	inc	r27
 a46:	d9 f7       	brne	.-10     	; 0xa3e <__fixunssfsi+0x42>
 a48:	3e f4       	brtc	.+14     	; 0xa58 <__fixunssfsi+0x5c>
 a4a:	90 95       	com	r25
 a4c:	80 95       	com	r24
 a4e:	70 95       	com	r23
 a50:	61 95       	neg	r22
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	08 95       	ret

00000a5a <__floatunsisf>:
 a5a:	e8 94       	clt
 a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__floatsisf+0x12>

00000a5e <__floatsisf>:
 a5e:	97 fb       	bst	r25, 7
 a60:	3e f4       	brtc	.+14     	; 0xa70 <__floatsisf+0x12>
 a62:	90 95       	com	r25
 a64:	80 95       	com	r24
 a66:	70 95       	com	r23
 a68:	61 95       	neg	r22
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	8f 4f       	sbci	r24, 0xFF	; 255
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	99 23       	and	r25, r25
 a72:	a9 f0       	breq	.+42     	; 0xa9e <__floatsisf+0x40>
 a74:	f9 2f       	mov	r31, r25
 a76:	96 e9       	ldi	r25, 0x96	; 150
 a78:	bb 27       	eor	r27, r27
 a7a:	93 95       	inc	r25
 a7c:	f6 95       	lsr	r31
 a7e:	87 95       	ror	r24
 a80:	77 95       	ror	r23
 a82:	67 95       	ror	r22
 a84:	b7 95       	ror	r27
 a86:	f1 11       	cpse	r31, r1
 a88:	f8 cf       	rjmp	.-16     	; 0xa7a <__floatsisf+0x1c>
 a8a:	fa f4       	brpl	.+62     	; 0xaca <__floatsisf+0x6c>
 a8c:	bb 0f       	add	r27, r27
 a8e:	11 f4       	brne	.+4      	; 0xa94 <__floatsisf+0x36>
 a90:	60 ff       	sbrs	r22, 0
 a92:	1b c0       	rjmp	.+54     	; 0xaca <__floatsisf+0x6c>
 a94:	6f 5f       	subi	r22, 0xFF	; 255
 a96:	7f 4f       	sbci	r23, 0xFF	; 255
 a98:	8f 4f       	sbci	r24, 0xFF	; 255
 a9a:	9f 4f       	sbci	r25, 0xFF	; 255
 a9c:	16 c0       	rjmp	.+44     	; 0xaca <__floatsisf+0x6c>
 a9e:	88 23       	and	r24, r24
 aa0:	11 f0       	breq	.+4      	; 0xaa6 <__floatsisf+0x48>
 aa2:	96 e9       	ldi	r25, 0x96	; 150
 aa4:	11 c0       	rjmp	.+34     	; 0xac8 <__floatsisf+0x6a>
 aa6:	77 23       	and	r23, r23
 aa8:	21 f0       	breq	.+8      	; 0xab2 <__floatsisf+0x54>
 aaa:	9e e8       	ldi	r25, 0x8E	; 142
 aac:	87 2f       	mov	r24, r23
 aae:	76 2f       	mov	r23, r22
 ab0:	05 c0       	rjmp	.+10     	; 0xabc <__floatsisf+0x5e>
 ab2:	66 23       	and	r22, r22
 ab4:	71 f0       	breq	.+28     	; 0xad2 <__floatsisf+0x74>
 ab6:	96 e8       	ldi	r25, 0x86	; 134
 ab8:	86 2f       	mov	r24, r22
 aba:	70 e0       	ldi	r23, 0x00	; 0
 abc:	60 e0       	ldi	r22, 0x00	; 0
 abe:	2a f0       	brmi	.+10     	; 0xaca <__floatsisf+0x6c>
 ac0:	9a 95       	dec	r25
 ac2:	66 0f       	add	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	da f7       	brpl	.-10     	; 0xac0 <__floatsisf+0x62>
 aca:	88 0f       	add	r24, r24
 acc:	96 95       	lsr	r25
 ace:	87 95       	ror	r24
 ad0:	97 f9       	bld	r25, 7
 ad2:	08 95       	ret

00000ad4 <__fp_mintl>:
 ad4:	88 23       	and	r24, r24
 ad6:	71 f4       	brne	.+28     	; 0xaf4 <__fp_mintl+0x20>
 ad8:	77 23       	and	r23, r23
 ada:	21 f0       	breq	.+8      	; 0xae4 <__fp_mintl+0x10>
 adc:	98 50       	subi	r25, 0x08	; 8
 ade:	87 2b       	or	r24, r23
 ae0:	76 2f       	mov	r23, r22
 ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <__fp_mintl+0x1e>
 ae4:	66 23       	and	r22, r22
 ae6:	11 f4       	brne	.+4      	; 0xaec <__fp_mintl+0x18>
 ae8:	99 27       	eor	r25, r25
 aea:	0d c0       	rjmp	.+26     	; 0xb06 <__stack+0x7>
 aec:	90 51       	subi	r25, 0x10	; 16
 aee:	86 2b       	or	r24, r22
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	60 e0       	ldi	r22, 0x00	; 0
 af4:	2a f0       	brmi	.+10     	; 0xb00 <__stack+0x1>
 af6:	9a 95       	dec	r25
 af8:	66 0f       	add	r22, r22
 afa:	77 1f       	adc	r23, r23
 afc:	88 1f       	adc	r24, r24
 afe:	da f7       	brpl	.-10     	; 0xaf6 <__fp_mintl+0x22>
 b00:	88 0f       	add	r24, r24
 b02:	96 95       	lsr	r25
 b04:	87 95       	ror	r24
 b06:	97 f9       	bld	r25, 7
 b08:	08 95       	ret

00000b0a <__fp_mpack>:
 b0a:	9f 3f       	cpi	r25, 0xFF	; 255
 b0c:	31 f0       	breq	.+12     	; 0xb1a <__fp_mpack_finite+0xc>

00000b0e <__fp_mpack_finite>:
 b0e:	91 50       	subi	r25, 0x01	; 1
 b10:	20 f4       	brcc	.+8      	; 0xb1a <__fp_mpack_finite+0xc>
 b12:	87 95       	ror	r24
 b14:	77 95       	ror	r23
 b16:	67 95       	ror	r22
 b18:	b7 95       	ror	r27
 b1a:	88 0f       	add	r24, r24
 b1c:	91 1d       	adc	r25, r1
 b1e:	96 95       	lsr	r25
 b20:	87 95       	ror	r24
 b22:	97 f9       	bld	r25, 7
 b24:	08 95       	ret

00000b26 <__fp_split3>:
 b26:	57 fd       	sbrc	r21, 7
 b28:	90 58       	subi	r25, 0x80	; 128
 b2a:	44 0f       	add	r20, r20
 b2c:	55 1f       	adc	r21, r21
 b2e:	59 f0       	breq	.+22     	; 0xb46 <__fp_splitA+0x10>
 b30:	5f 3f       	cpi	r21, 0xFF	; 255
 b32:	71 f0       	breq	.+28     	; 0xb50 <__fp_splitA+0x1a>
 b34:	47 95       	ror	r20

00000b36 <__fp_splitA>:
 b36:	88 0f       	add	r24, r24
 b38:	97 fb       	bst	r25, 7
 b3a:	99 1f       	adc	r25, r25
 b3c:	61 f0       	breq	.+24     	; 0xb56 <__fp_splitA+0x20>
 b3e:	9f 3f       	cpi	r25, 0xFF	; 255
 b40:	79 f0       	breq	.+30     	; 0xb60 <__fp_splitA+0x2a>
 b42:	87 95       	ror	r24
 b44:	08 95       	ret
 b46:	12 16       	cp	r1, r18
 b48:	13 06       	cpc	r1, r19
 b4a:	14 06       	cpc	r1, r20
 b4c:	55 1f       	adc	r21, r21
 b4e:	f2 cf       	rjmp	.-28     	; 0xb34 <__fp_split3+0xe>
 b50:	46 95       	lsr	r20
 b52:	f1 df       	rcall	.-30     	; 0xb36 <__fp_splitA>
 b54:	08 c0       	rjmp	.+16     	; 0xb66 <__fp_splitA+0x30>
 b56:	16 16       	cp	r1, r22
 b58:	17 06       	cpc	r1, r23
 b5a:	18 06       	cpc	r1, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	f1 cf       	rjmp	.-30     	; 0xb42 <__fp_splitA+0xc>
 b60:	86 95       	lsr	r24
 b62:	71 05       	cpc	r23, r1
 b64:	61 05       	cpc	r22, r1
 b66:	08 94       	sec
 b68:	08 95       	ret

00000b6a <__fp_trunc>:
 b6a:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_splitA>
 b6e:	a0 f0       	brcs	.+40     	; 0xb98 <__fp_trunc+0x2e>
 b70:	be e7       	ldi	r27, 0x7E	; 126
 b72:	b9 17       	cp	r27, r25
 b74:	88 f4       	brcc	.+34     	; 0xb98 <__fp_trunc+0x2e>
 b76:	bb 27       	eor	r27, r27
 b78:	9f 38       	cpi	r25, 0x8F	; 143
 b7a:	60 f4       	brcc	.+24     	; 0xb94 <__fp_trunc+0x2a>
 b7c:	16 16       	cp	r1, r22
 b7e:	b1 1d       	adc	r27, r1
 b80:	67 2f       	mov	r22, r23
 b82:	78 2f       	mov	r23, r24
 b84:	88 27       	eor	r24, r24
 b86:	98 5f       	subi	r25, 0xF8	; 248
 b88:	f7 cf       	rjmp	.-18     	; 0xb78 <__fp_trunc+0xe>
 b8a:	86 95       	lsr	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	b1 1d       	adc	r27, r1
 b92:	93 95       	inc	r25
 b94:	96 39       	cpi	r25, 0x96	; 150
 b96:	c8 f3       	brcs	.-14     	; 0xb8a <__fp_trunc+0x20>
 b98:	08 95       	ret

00000b9a <__fp_zero>:
 b9a:	e8 94       	clt

00000b9c <__fp_szero>:
 b9c:	bb 27       	eor	r27, r27
 b9e:	66 27       	eor	r22, r22
 ba0:	77 27       	eor	r23, r23
 ba2:	cb 01       	movw	r24, r22
 ba4:	97 f9       	bld	r25, 7
 ba6:	08 95       	ret

00000ba8 <__mulsf3>:
 ba8:	0e 94 e7 05 	call	0xbce	; 0xbce <__mulsf3x>
 bac:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_round>
 bb0:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fp_pscA>
 bb4:	38 f0       	brcs	.+14     	; 0xbc4 <__mulsf3+0x1c>
 bb6:	0e 94 51 06 	call	0xca2	; 0xca2 <__fp_pscB>
 bba:	20 f0       	brcs	.+8      	; 0xbc4 <__mulsf3+0x1c>
 bbc:	95 23       	and	r25, r21
 bbe:	11 f0       	breq	.+4      	; 0xbc4 <__mulsf3+0x1c>
 bc0:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_inf>
 bc4:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_nan>
 bc8:	11 24       	eor	r1, r1
 bca:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_szero>

00000bce <__mulsf3x>:
 bce:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_split3>
 bd2:	70 f3       	brcs	.-36     	; 0xbb0 <__mulsf3+0x8>

00000bd4 <__mulsf3_pse>:
 bd4:	95 9f       	mul	r25, r21
 bd6:	c1 f3       	breq	.-16     	; 0xbc8 <__mulsf3+0x20>
 bd8:	95 0f       	add	r25, r21
 bda:	50 e0       	ldi	r21, 0x00	; 0
 bdc:	55 1f       	adc	r21, r21
 bde:	62 9f       	mul	r22, r18
 be0:	f0 01       	movw	r30, r0
 be2:	72 9f       	mul	r23, r18
 be4:	bb 27       	eor	r27, r27
 be6:	f0 0d       	add	r31, r0
 be8:	b1 1d       	adc	r27, r1
 bea:	63 9f       	mul	r22, r19
 bec:	aa 27       	eor	r26, r26
 bee:	f0 0d       	add	r31, r0
 bf0:	b1 1d       	adc	r27, r1
 bf2:	aa 1f       	adc	r26, r26
 bf4:	64 9f       	mul	r22, r20
 bf6:	66 27       	eor	r22, r22
 bf8:	b0 0d       	add	r27, r0
 bfa:	a1 1d       	adc	r26, r1
 bfc:	66 1f       	adc	r22, r22
 bfe:	82 9f       	mul	r24, r18
 c00:	22 27       	eor	r18, r18
 c02:	b0 0d       	add	r27, r0
 c04:	a1 1d       	adc	r26, r1
 c06:	62 1f       	adc	r22, r18
 c08:	73 9f       	mul	r23, r19
 c0a:	b0 0d       	add	r27, r0
 c0c:	a1 1d       	adc	r26, r1
 c0e:	62 1f       	adc	r22, r18
 c10:	83 9f       	mul	r24, r19
 c12:	a0 0d       	add	r26, r0
 c14:	61 1d       	adc	r22, r1
 c16:	22 1f       	adc	r18, r18
 c18:	74 9f       	mul	r23, r20
 c1a:	33 27       	eor	r19, r19
 c1c:	a0 0d       	add	r26, r0
 c1e:	61 1d       	adc	r22, r1
 c20:	23 1f       	adc	r18, r19
 c22:	84 9f       	mul	r24, r20
 c24:	60 0d       	add	r22, r0
 c26:	21 1d       	adc	r18, r1
 c28:	82 2f       	mov	r24, r18
 c2a:	76 2f       	mov	r23, r22
 c2c:	6a 2f       	mov	r22, r26
 c2e:	11 24       	eor	r1, r1
 c30:	9f 57       	subi	r25, 0x7F	; 127
 c32:	50 40       	sbci	r21, 0x00	; 0
 c34:	9a f0       	brmi	.+38     	; 0xc5c <__mulsf3_pse+0x88>
 c36:	f1 f0       	breq	.+60     	; 0xc74 <__mulsf3_pse+0xa0>
 c38:	88 23       	and	r24, r24
 c3a:	4a f0       	brmi	.+18     	; 0xc4e <__mulsf3_pse+0x7a>
 c3c:	ee 0f       	add	r30, r30
 c3e:	ff 1f       	adc	r31, r31
 c40:	bb 1f       	adc	r27, r27
 c42:	66 1f       	adc	r22, r22
 c44:	77 1f       	adc	r23, r23
 c46:	88 1f       	adc	r24, r24
 c48:	91 50       	subi	r25, 0x01	; 1
 c4a:	50 40       	sbci	r21, 0x00	; 0
 c4c:	a9 f7       	brne	.-22     	; 0xc38 <__mulsf3_pse+0x64>
 c4e:	9e 3f       	cpi	r25, 0xFE	; 254
 c50:	51 05       	cpc	r21, r1
 c52:	80 f0       	brcs	.+32     	; 0xc74 <__mulsf3_pse+0xa0>
 c54:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_inf>
 c58:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_szero>
 c5c:	5f 3f       	cpi	r21, 0xFF	; 255
 c5e:	e4 f3       	brlt	.-8      	; 0xc58 <__mulsf3_pse+0x84>
 c60:	98 3e       	cpi	r25, 0xE8	; 232
 c62:	d4 f3       	brlt	.-12     	; 0xc58 <__mulsf3_pse+0x84>
 c64:	86 95       	lsr	r24
 c66:	77 95       	ror	r23
 c68:	67 95       	ror	r22
 c6a:	b7 95       	ror	r27
 c6c:	f7 95       	ror	r31
 c6e:	e7 95       	ror	r30
 c70:	9f 5f       	subi	r25, 0xFF	; 255
 c72:	c1 f7       	brne	.-16     	; 0xc64 <__mulsf3_pse+0x90>
 c74:	fe 2b       	or	r31, r30
 c76:	88 0f       	add	r24, r24
 c78:	91 1d       	adc	r25, r1
 c7a:	96 95       	lsr	r25
 c7c:	87 95       	ror	r24
 c7e:	97 f9       	bld	r25, 7
 c80:	08 95       	ret

00000c82 <__fp_inf>:
 c82:	97 f9       	bld	r25, 7
 c84:	9f 67       	ori	r25, 0x7F	; 127
 c86:	80 e8       	ldi	r24, 0x80	; 128
 c88:	70 e0       	ldi	r23, 0x00	; 0
 c8a:	60 e0       	ldi	r22, 0x00	; 0
 c8c:	08 95       	ret

00000c8e <__fp_nan>:
 c8e:	9f ef       	ldi	r25, 0xFF	; 255
 c90:	80 ec       	ldi	r24, 0xC0	; 192
 c92:	08 95       	ret

00000c94 <__fp_pscA>:
 c94:	00 24       	eor	r0, r0
 c96:	0a 94       	dec	r0
 c98:	16 16       	cp	r1, r22
 c9a:	17 06       	cpc	r1, r23
 c9c:	18 06       	cpc	r1, r24
 c9e:	09 06       	cpc	r0, r25
 ca0:	08 95       	ret

00000ca2 <__fp_pscB>:
 ca2:	00 24       	eor	r0, r0
 ca4:	0a 94       	dec	r0
 ca6:	12 16       	cp	r1, r18
 ca8:	13 06       	cpc	r1, r19
 caa:	14 06       	cpc	r1, r20
 cac:	05 06       	cpc	r0, r21
 cae:	08 95       	ret

00000cb0 <__fp_round>:
 cb0:	09 2e       	mov	r0, r25
 cb2:	03 94       	inc	r0
 cb4:	00 0c       	add	r0, r0
 cb6:	11 f4       	brne	.+4      	; 0xcbc <__fp_round+0xc>
 cb8:	88 23       	and	r24, r24
 cba:	52 f0       	brmi	.+20     	; 0xcd0 <__fp_round+0x20>
 cbc:	bb 0f       	add	r27, r27
 cbe:	40 f4       	brcc	.+16     	; 0xcd0 <__fp_round+0x20>
 cc0:	bf 2b       	or	r27, r31
 cc2:	11 f4       	brne	.+4      	; 0xcc8 <__fp_round+0x18>
 cc4:	60 ff       	sbrs	r22, 0
 cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <__fp_round+0x20>
 cc8:	6f 5f       	subi	r22, 0xFF	; 255
 cca:	7f 4f       	sbci	r23, 0xFF	; 255
 ccc:	8f 4f       	sbci	r24, 0xFF	; 255
 cce:	9f 4f       	sbci	r25, 0xFF	; 255
 cd0:	08 95       	ret

00000cd2 <__tablejump2__>:
 cd2:	ee 0f       	add	r30, r30
 cd4:	ff 1f       	adc	r31, r31
 cd6:	05 90       	lpm	r0, Z+
 cd8:	f4 91       	lpm	r31, Z
 cda:	e0 2d       	mov	r30, r0
 cdc:	09 94       	ijmp

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
