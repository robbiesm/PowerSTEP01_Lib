
PowerSTEP01_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3b  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000adc  00000000  00000000  00000edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000579  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000516  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000043  00000000  00000000  000024d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002519  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a0 30       	cpi	r26, 0x00	; 0
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  cc:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <ADCInit>:
		SWR |= 0b00001110;
	}
	if(928 < adcval)			//  1 1 1 1 / 0 - 1023
	{
		SWR &= 0b11110000;
		SWR |= 0b00001111;
  d4:	aa e7       	ldi	r26, 0x7A	; 122
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	8c 91       	ld	r24, X
  da:	87 60       	ori	r24, 0x07	; 7
  dc:	8c 93       	st	X, r24
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
  e8:	80 81       	ld	r24, Z
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	80 83       	st	Z, r24
  ee:	80 81       	ld	r24, Z
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	80 83       	st	Z, r24
  f4:	80 81       	ld	r24, Z
  f6:	8d 7f       	andi	r24, 0xFD	; 253
  f8:	80 83       	st	Z, r24
  fa:	80 81       	ld	r24, Z
  fc:	8b 7f       	andi	r24, 0xFB	; 251
  fe:	80 83       	st	Z, r24
 100:	80 81       	ld	r24, Z
 102:	87 7f       	andi	r24, 0xF7	; 247
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	80 83       	st	Z, r24
 10c:	eb e7       	ldi	r30, 0x7B	; 123
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	80 83       	st	Z, r24
 116:	8c 91       	ld	r24, X
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8c 93       	st	X, r24
 11c:	08 95       	ret

0000011e <getADC>:
}

uint16_t getADC(void)
{
	uint16_t adcval;
	ADCSRA |= (1 << ADSC); //start conversion
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));	//wait until conversion is complete
 128:	80 81       	ld	r24, Z
 12a:	86 fd       	sbrc	r24, 6
 12c:	fd cf       	rjmp	.-6      	; 0x128 <getADC+0xa>
	adcval = ((ADCH & 0b00000011) << 8);
 12e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 132:	83 70       	andi	r24, 0x03	; 3
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	98 2f       	mov	r25, r24
 138:	88 27       	eor	r24, r24
	adcval |= ADCL;
 13a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	return adcval;
 13e:	82 2b       	or	r24, r18
 140:	08 95       	ret

00000142 <PWMinit>:

#include "PWM.h"

void PWMinit(void)
{
	DDRB |= (1<<PORTB7);
 142:	27 9a       	sbi	0x04, 7	; 4
	TCCR0A |= (1<<COM0A1)|(1<<WGM00)|(1<<WGM01);
 144:	84 b5       	in	r24, 0x24	; 36
 146:	83 68       	ori	r24, 0x83	; 131
 148:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);
 14a:	85 b5       	in	r24, 0x25	; 37
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	85 bd       	out	0x25, r24	; 37
 150:	08 95       	ret

00000152 <main>:

int main(void)
{
	//SPI_Init();
	//motorControl_Init();
	PWMinit();
 152:	0e 94 a1 00 	call	0x142	; 0x142 <PWMinit>
	ADCInit();
 156:	0e 94 6a 00 	call	0xd4	; 0xd4 <ADCInit>
		move(0, 0, 64000);
		run(0, 0, 100);
		_delay_ms(20000);
		softStop(0);
		_delay_ms(1000);*/
		PWM_DutyCycle = (uint8_t)(getADC() >> 2);
 15a:	0e 94 8f 00 	call	0x11e	; 0x11e <getADC>
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	87 bd       	out	0x27, r24	; 39
 168:	f8 cf       	rjmp	.-16     	; 0x15a <main+0x8>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
