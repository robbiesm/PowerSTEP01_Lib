
PowerSTEP01_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000c88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002805  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f7b  00000000  00000000  0000373d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011b8  00000000  00000000  000046b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  00005870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098c  00000000  00000000  00005edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000287b  00000000  00000000  00006868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  000090e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	90 01       	movw	r18, r0
  ae:	94 01       	movw	r18, r8
  b0:	98 01       	movw	r18, r16
  b2:	9c 01       	movw	r18, r24
  b4:	a3 01       	movw	r20, r6
  b6:	a7 01       	movw	r20, r14
  b8:	ab 01       	movw	r20, r22
  ba:	af 01       	movw	r20, r30
  bc:	b7 01       	movw	r22, r14
  be:	bb 01       	movw	r22, r22
  c0:	bf 01       	movw	r22, r30
  c2:	c3 01       	movw	r24, r6
  c4:	c7 01       	movw	r24, r14
  c6:	cb 01       	movw	r24, r22
  c8:	cf 01       	movw	r24, r30
  ca:	d3 01       	movw	r26, r6
  cc:	d7 01       	movw	r26, r14
  ce:	df 01       	movw	r26, r30
  d0:	e3 01       	movw	r28, r6
  d2:	eb 01       	movw	r28, r22
  d4:	b3 01       	movw	r22, r6
  d6:	f3 01       	movw	r30, r6
  d8:	f7 01       	movw	r30, r14
  da:	fb 01       	movw	r30, r22
  dc:	ff 01       	movw	r30, r30
  de:	03 02       	muls	r16, r19
  e0:	07 02       	muls	r16, r23

000000e2 <__ctors_end>:
  e2:	11 24       	eor	r1, r1
  e4:	1f be       	out	0x3f, r1	; 63
  e6:	cf ef       	ldi	r28, 0xFF	; 255
  e8:	da e0       	ldi	r29, 0x0A	; 10
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a0 31       	cpi	r26, 0x10	; 16
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 77 04 	call	0x8ee	; 0x8ee <main>
 102:	0c 94 08 06 	jmp	0xc10	; 0xc10 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <ADCInit>:

#include "R2R.h"

void ADCInit(void)
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 10a:	aa e7       	ldi	r26, 0x7A	; 122
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	8c 91       	ld	r24, X
 110:	87 60       	ori	r24, 0x07	; 7
 112:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS0) | (1 << ADLAR); // 10 bit reading (Right adjust)
 114:	ec e7       	ldi	r30, 0x7C	; 124
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 66       	ori	r24, 0x60	; 96
 11c:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX0); // set to pin 0 of port F
 11e:	80 81       	ld	r24, Z
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX1); // set to pin 0 of port F
 124:	80 81       	ld	r24, Z
 126:	8d 7f       	andi	r24, 0xFD	; 253
 128:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX2); // set to pin 0 of port F
 12a:	80 81       	ld	r24, Z
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX3); // set to pin 0 of port F
 130:	80 81       	ld	r24, Z
 132:	87 7f       	andi	r24, 0xF7	; 247
 134:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX4); // set to pin 0 of port F
 136:	80 81       	ld	r24, Z
 138:	8f 7e       	andi	r24, 0xEF	; 239
 13a:	80 83       	st	Z, r24
	ADCSRB &= ~(1 << MUX5); // set to pin 0 of port F
 13c:	eb e7       	ldi	r30, 0x7B	; 123
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	8f 7d       	andi	r24, 0xDF	; 223
 144:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  // Enable ADC
 146:	8c 91       	ld	r24, X
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	8c 93       	st	X, r24
 14c:	08 95       	ret

0000014e <SPIXfer>:
}

uint8_t getOCD_TH(uint8_t motor)
{
	return (uint8_t)getParam(motor, OCD_TH);
}
 14e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <transfer>
 152:	08 95       	ret

00000154 <SPIXferMotors>:
 154:	9f 92       	push	r9
 156:	af 92       	push	r10
 158:	bf 92       	push	r11
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <SPIXferMotors+0x18>
 16c:	1f 92       	push	r1
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	96 2e       	mov	r9, r22
 174:	81 11       	cpse	r24, r1
 176:	01 c0       	rjmp	.+2      	; 0x17a <SPIXferMotors+0x26>
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	84 30       	cpi	r24, 0x04	; 4
 17c:	08 f0       	brcs	.+2      	; 0x180 <SPIXferMotors+0x2c>
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	28 98       	cbi	0x05, 0	; 5
 182:	9e 01       	movw	r18, r28
 184:	2f 5f       	subi	r18, 0xFF	; 255
 186:	3f 4f       	sbci	r19, 0xFF	; 255
 188:	69 01       	movw	r12, r18
 18a:	0f 2e       	mov	r0, r31
 18c:	f3 e0       	ldi	r31, 0x03	; 3
 18e:	ef 2e       	mov	r14, r31
 190:	f1 2c       	mov	r15, r1
 192:	f0 2d       	mov	r31, r0
 194:	08 2f       	mov	r16, r24
 196:	10 e0       	ldi	r17, 0x00	; 0
 198:	58 01       	movw	r10, r16
 19a:	0e 15       	cp	r16, r14
 19c:	1f 05       	cpc	r17, r15
 19e:	31 f4       	brne	.+12     	; 0x1ac <SPIXferMotors+0x58>
 1a0:	89 2d       	mov	r24, r9
 1a2:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
 1a6:	f6 01       	movw	r30, r12
 1a8:	80 83       	st	Z, r24
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <SPIXferMotors+0x62>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
 1b2:	f6 01       	movw	r30, r12
 1b4:	80 83       	st	Z, r24
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	ef 1a       	sub	r14, r31
 1ba:	f1 08       	sbc	r15, r1
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	c2 1a       	sub	r12, r18
 1c0:	d2 0a       	sbc	r13, r18
 1c2:	e1 14       	cp	r14, r1
 1c4:	f1 04       	cpc	r15, r1
 1c6:	41 f7       	brne	.-48     	; 0x198 <SPIXferMotors+0x44>
 1c8:	28 9a       	sbi	0x05, 0	; 5
 1ca:	fe 01       	movw	r30, r28
 1cc:	ea 19       	sub	r30, r10
 1ce:	fb 09       	sbc	r31, r11
 1d0:	84 81       	ldd	r24, Z+4	; 0x04
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	cf 90       	pop	r12
 1e8:	bf 90       	pop	r11
 1ea:	af 90       	pop	r10
 1ec:	9f 90       	pop	r9
 1ee:	08 95       	ret

000001f0 <SPIXferParam>:
 1f0:	6f 92       	push	r6
 1f2:	7f 92       	push	r7
 1f4:	8f 92       	push	r8
 1f6:	9f 92       	push	r9
 1f8:	af 92       	push	r10
 1fa:	bf 92       	push	r11
 1fc:	cf 92       	push	r12
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	78 2e       	mov	r7, r24
 20e:	4a 01       	movw	r8, r20
 210:	5b 01       	movw	r10, r22
 212:	62 2e       	mov	r6, r18
 214:	02 2f       	mov	r16, r18
 216:	06 95       	lsr	r16
 218:	06 95       	lsr	r16
 21a:	06 95       	lsr	r16
 21c:	82 2f       	mov	r24, r18
 21e:	87 70       	andi	r24, 0x07	; 7
 220:	09 f0       	breq	.+2      	; 0x224 <SPIXferParam+0x34>
 222:	0f 5f       	subi	r16, 0xFF	; 255
 224:	00 23       	and	r16, r16
 226:	41 f1       	breq	.+80     	; 0x278 <SPIXferParam+0x88>
 228:	c0 2f       	mov	r28, r16
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	21 97       	sbiw	r28, 0x01	; 1
 22e:	cc 0f       	add	r28, r28
 230:	dd 1f       	adc	r29, r29
 232:	cc 0f       	add	r28, r28
 234:	dd 1f       	adc	r29, r29
 236:	cc 0f       	add	r28, r28
 238:	dd 1f       	adc	r29, r29
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	dc 01       	movw	r26, r24
 242:	cc 24       	eor	r12, r12
 244:	d8 2e       	mov	r13, r24
 246:	e9 2e       	mov	r14, r25
 248:	fa 2e       	mov	r15, r26
 24a:	c5 01       	movw	r24, r10
 24c:	b4 01       	movw	r22, r8
 24e:	0c 2e       	mov	r0, r28
 250:	04 c0       	rjmp	.+8      	; 0x25a <SPIXferParam+0x6a>
 252:	96 95       	lsr	r25
 254:	87 95       	ror	r24
 256:	77 95       	ror	r23
 258:	67 95       	ror	r22
 25a:	0a 94       	dec	r0
 25c:	d2 f7       	brpl	.-12     	; 0x252 <SPIXferParam+0x62>
 25e:	87 2d       	mov	r24, r7
 260:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 264:	a7 01       	movw	r20, r14
 266:	96 01       	movw	r18, r12
 268:	28 2b       	or	r18, r24
 26a:	da 01       	movw	r26, r20
 26c:	c9 01       	movw	r24, r18
 26e:	1f 5f       	subi	r17, 0xFF	; 255
 270:	28 97       	sbiw	r28, 0x08	; 8
 272:	01 13       	cpse	r16, r17
 274:	e6 cf       	rjmp	.-52     	; 0x242 <SPIXferParam+0x52>
 276:	03 c0       	rjmp	.+6      	; 0x27e <SPIXferParam+0x8e>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	dc 01       	movw	r26, r24
 27e:	20 e2       	ldi	r18, 0x20	; 32
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	26 19       	sub	r18, r6
 284:	31 09       	sbc	r19, r1
 286:	4f ef       	ldi	r20, 0xFF	; 255
 288:	5f ef       	ldi	r21, 0xFF	; 255
 28a:	ba 01       	movw	r22, r20
 28c:	04 c0       	rjmp	.+8      	; 0x296 <SPIXferParam+0xa6>
 28e:	76 95       	lsr	r23
 290:	67 95       	ror	r22
 292:	57 95       	ror	r21
 294:	47 95       	ror	r20
 296:	2a 95       	dec	r18
 298:	d2 f7       	brpl	.-12     	; 0x28e <SPIXferParam+0x9e>
 29a:	8a 01       	movw	r16, r20
 29c:	9b 01       	movw	r18, r22
 29e:	08 23       	and	r16, r24
 2a0:	19 23       	and	r17, r25
 2a2:	2a 23       	and	r18, r26
 2a4:	3b 23       	and	r19, r27
 2a6:	c9 01       	movw	r24, r18
 2a8:	b8 01       	movw	r22, r16
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	df 90       	pop	r13
 2b8:	cf 90       	pop	r12
 2ba:	bf 90       	pop	r11
 2bc:	af 90       	pop	r10
 2be:	9f 90       	pop	r9
 2c0:	8f 90       	pop	r8
 2c2:	7f 90       	pop	r7
 2c4:	6f 90       	pop	r6
 2c6:	08 95       	ret

000002c8 <getStatus>:
 2c8:	cf 93       	push	r28
 2ca:	c8 2f       	mov	r28, r24
 2cc:	60 ed       	ldi	r22, 0xD0	; 208
 2ce:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	8c 2f       	mov	r24, r28
 2d6:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	8c 2f       	mov	r24, r28
 2de:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <powerSTEP01_GPIO_Init>:
 2e6:	20 9a       	sbi	0x04, 0	; 4
 2e8:	28 9a       	sbi	0x05, 0	; 5
 2ea:	87 b1       	in	r24, 0x07	; 7
 2ec:	87 b9       	out	0x07, r24	; 7
 2ee:	88 b1       	in	r24, 0x08	; 8
 2f0:	80 6c       	ori	r24, 0xC0	; 192
 2f2:	88 b9       	out	0x08, r24	; 8
 2f4:	6e 9a       	sbi	0x0d, 6	; 13
 2f6:	76 98       	cbi	0x0e, 6	; 14
 2f8:	08 95       	ret

000002fa <releaseReset>:
 2fa:	76 9a       	sbi	0x0e, 6	; 14
 2fc:	08 95       	ret

000002fe <paramHandler>:
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	e6 2f       	mov	r30, r22
 304:	ba 01       	movw	r22, r20
 306:	a9 01       	movw	r20, r18
 308:	0e 2f       	mov	r16, r30
 30a:	10 e0       	ldi	r17, 0x00	; 0
 30c:	f8 01       	movw	r30, r16
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	eb 31       	cpi	r30, 0x1B	; 27
 312:	f1 05       	cpc	r31, r1
 314:	08 f0       	brcs	.+2      	; 0x318 <paramHandler+0x1a>
 316:	82 c0       	rjmp	.+260    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 318:	ea 5a       	subi	r30, 0xAA	; 170
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__tablejump2__>
 320:	26 e1       	ldi	r18, 0x16	; 22
 322:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 326:	80 c0       	rjmp	.+256    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 328:	29 e0       	ldi	r18, 0x09	; 9
 32a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 32e:	7c c0       	rjmp	.+248    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 330:	26 e1       	ldi	r18, 0x16	; 22
 332:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 336:	78 c0       	rjmp	.+240    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 338:	24 e1       	ldi	r18, 0x14	; 20
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	ba 01       	movw	r22, r20
 340:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 344:	71 c0       	rjmp	.+226    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 346:	2c e0       	ldi	r18, 0x0C	; 12
 348:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 34c:	6d c0       	rjmp	.+218    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 34e:	2c e0       	ldi	r18, 0x0C	; 12
 350:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 354:	69 c0       	rjmp	.+210    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 356:	2a e0       	ldi	r18, 0x0A	; 10
 358:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 35c:	65 c0       	rjmp	.+202    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 35e:	2d e0       	ldi	r18, 0x0D	; 13
 360:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 364:	61 c0       	rjmp	.+194    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 366:	2a e0       	ldi	r18, 0x0A	; 10
 368:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 36c:	5d c0       	rjmp	.+186    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 36e:	28 e0       	ldi	r18, 0x08	; 8
 370:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 374:	59 c0       	rjmp	.+178    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 376:	28 e0       	ldi	r18, 0x08	; 8
 378:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 37c:	55 c0       	rjmp	.+170    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 37e:	28 e0       	ldi	r18, 0x08	; 8
 380:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 384:	51 c0       	rjmp	.+162    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 386:	28 e0       	ldi	r18, 0x08	; 8
 388:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 38c:	4d c0       	rjmp	.+154    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 38e:	2e e0       	ldi	r18, 0x0E	; 14
 390:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 394:	49 c0       	rjmp	.+146    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 396:	28 e0       	ldi	r18, 0x08	; 8
 398:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 39c:	45 c0       	rjmp	.+138    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 39e:	28 e0       	ldi	r18, 0x08	; 8
 3a0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 3a4:	41 c0       	rjmp	.+130    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3a6:	28 e0       	ldi	r18, 0x08	; 8
 3a8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 3ac:	3d c0       	rjmp	.+122    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3ae:	4f 70       	andi	r20, 0x0F	; 15
 3b0:	55 27       	eor	r21, r21
 3b2:	66 27       	eor	r22, r22
 3b4:	77 27       	eor	r23, r23
 3b6:	28 e0       	ldi	r18, 0x08	; 8
 3b8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 3bc:	35 c0       	rjmp	.+106    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3be:	28 e0       	ldi	r18, 0x08	; 8
 3c0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 3c4:	31 c0       	rjmp	.+98     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3c6:	4f 71       	andi	r20, 0x1F	; 31
 3c8:	55 27       	eor	r21, r21
 3ca:	66 27       	eor	r22, r22
 3cc:	77 27       	eor	r23, r23
 3ce:	28 e0       	ldi	r18, 0x08	; 8
 3d0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 3d4:	29 c0       	rjmp	.+82     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3d6:	4f 71       	andi	r20, 0x1F	; 31
 3d8:	55 27       	eor	r21, r21
 3da:	66 27       	eor	r22, r22
 3dc:	77 27       	eor	r23, r23
 3de:	28 e0       	ldi	r18, 0x08	; 8
 3e0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 3e4:	21 c0       	rjmp	.+66     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3e6:	28 e0       	ldi	r18, 0x08	; 8
 3e8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 3ec:	1d c0       	rjmp	.+58     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3ee:	28 e0       	ldi	r18, 0x08	; 8
 3f0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 3f4:	19 c0       	rjmp	.+50     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3f6:	20 e1       	ldi	r18, 0x10	; 16
 3f8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 3fc:	15 c0       	rjmp	.+42     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3fe:	28 e0       	ldi	r18, 0x08	; 8
 400:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 404:	11 c0       	rjmp	.+34     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 406:	20 e1       	ldi	r18, 0x10	; 16
 408:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 40c:	0d c0       	rjmp	.+26     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 40e:	20 e1       	ldi	r18, 0x10	; 16
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	ba 01       	movw	r22, r20
 416:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPIXferParam>
 41a:	06 c0       	rjmp	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41c:	64 2f       	mov	r22, r20
 41e:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	cb 01       	movw	r24, r22
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

0000042e <setParam>:
 42e:	cf 92       	push	r12
 430:	df 92       	push	r13
 432:	ef 92       	push	r14
 434:	ff 92       	push	r15
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	c8 2f       	mov	r28, r24
 440:	d4 2f       	mov	r29, r20
 442:	68 01       	movw	r12, r16
 444:	79 01       	movw	r14, r18
 446:	64 2f       	mov	r22, r20
 448:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 44c:	a7 01       	movw	r20, r14
 44e:	96 01       	movw	r18, r12
 450:	6d 2f       	mov	r22, r29
 452:	8c 2f       	mov	r24, r28
 454:	0e 94 7f 01 	call	0x2fe	; 0x2fe <paramHandler>
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	08 95       	ret

0000046a <setRunKval>:
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	06 2f       	mov	r16, r22
 470:	10 e0       	ldi	r17, 0x00	; 0
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	4a e0       	ldi	r20, 0x0A	; 10
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	08 95       	ret

00000484 <setHoldKval>:
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	06 2f       	mov	r16, r22
 48a:	10 e0       	ldi	r17, 0x00	; 0
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	49 e0       	ldi	r20, 0x09	; 9
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	08 95       	ret

0000049e <setAccKval>:
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	06 2f       	mov	r16, r22
 4a4:	10 e0       	ldi	r17, 0x00	; 0
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	4b e0       	ldi	r20, 0x0B	; 11
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	08 95       	ret

000004b8 <setDecKval>:
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	06 2f       	mov	r16, r22
 4be:	10 e0       	ldi	r17, 0x00	; 0
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	4c e0       	ldi	r20, 0x0C	; 12
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	08 95       	ret

000004d2 <setOCD_TH>:
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	06 2f       	mov	r16, r22
 4d8:	10 e0       	ldi	r17, 0x00	; 0
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	43 e1       	ldi	r20, 0x13	; 19
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	08 95       	ret

000004ec <setSTALL_TH>:
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	06 2f       	mov	r16, r22
 4f2:	10 e0       	ldi	r17, 0x00	; 0
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	44 e1       	ldi	r20, 0x14	; 20
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	08 95       	ret

00000506 <setAcc>:
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
 50a:	cf 93       	push	r28
 50c:	c8 2f       	mov	r28, r24
 50e:	cb 01       	movw	r24, r22
 510:	ba 01       	movw	r22, r20
 512:	0e 94 c6 04 	call	0x98c	; 0x98c <__floatunsisf>
 516:	2c e8       	ldi	r18, 0x8C	; 140
 518:	3c eb       	ldi	r19, 0xBC	; 188
 51a:	4c e0       	ldi	r20, 0x0C	; 12
 51c:	5e e3       	ldi	r21, 0x3E	; 62
 51e:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 522:	0e 94 97 04 	call	0x92e	; 0x92e <__fixunssfsi>
 526:	8b 01       	movw	r16, r22
 528:	9c 01       	movw	r18, r24
 52a:	01 15       	cp	r16, r1
 52c:	80 e1       	ldi	r24, 0x10	; 16
 52e:	18 07       	cpc	r17, r24
 530:	21 05       	cpc	r18, r1
 532:	31 05       	cpc	r19, r1
 534:	20 f0       	brcs	.+8      	; 0x53e <setAcc+0x38>
 536:	0f ef       	ldi	r16, 0xFF	; 255
 538:	1f e0       	ldi	r17, 0x0F	; 15
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	45 e0       	ldi	r20, 0x05	; 5
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	8c 2f       	mov	r24, r28
 544:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	08 95       	ret

00000550 <setDec>:
 550:	0f 93       	push	r16
 552:	1f 93       	push	r17
 554:	cf 93       	push	r28
 556:	c8 2f       	mov	r28, r24
 558:	cb 01       	movw	r24, r22
 55a:	ba 01       	movw	r22, r20
 55c:	0e 94 c6 04 	call	0x98c	; 0x98c <__floatunsisf>
 560:	2c e8       	ldi	r18, 0x8C	; 140
 562:	3c eb       	ldi	r19, 0xBC	; 188
 564:	4c e0       	ldi	r20, 0x0C	; 12
 566:	5e e3       	ldi	r21, 0x3E	; 62
 568:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 56c:	0e 94 97 04 	call	0x92e	; 0x92e <__fixunssfsi>
 570:	8b 01       	movw	r16, r22
 572:	9c 01       	movw	r18, r24
 574:	01 15       	cp	r16, r1
 576:	80 e1       	ldi	r24, 0x10	; 16
 578:	18 07       	cpc	r17, r24
 57a:	21 05       	cpc	r18, r1
 57c:	31 05       	cpc	r19, r1
 57e:	20 f0       	brcs	.+8      	; 0x588 <setDec+0x38>
 580:	0f ef       	ldi	r16, 0xFF	; 255
 582:	1f e0       	ldi	r17, 0x0F	; 15
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	46 e0       	ldi	r20, 0x06	; 6
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	8c 2f       	mov	r24, r28
 58e:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	08 95       	ret

0000059a <getParam>:
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	c8 2f       	mov	r28, r24
 5a0:	d6 2f       	mov	r29, r22
 5a2:	60 62       	ori	r22, 0x20	; 32
 5a4:	0e 94 aa 00 	call	0x154	; 0x154 <SPIXferMotors>
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	a9 01       	movw	r20, r18
 5ae:	6d 2f       	mov	r22, r29
 5b0:	8c 2f       	mov	r24, r28
 5b2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <paramHandler>
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <setOscMode>:
 5bc:	ff 92       	push	r15
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	f8 2e       	mov	r15, r24
 5c8:	eb 01       	movw	r28, r22
 5ca:	6a e1       	ldi	r22, 0x1A	; 26
 5cc:	0e 94 cd 02 	call	0x59a	; 0x59a <getParam>
 5d0:	dc 01       	movw	r26, r24
 5d2:	cb 01       	movw	r24, r22
 5d4:	80 7f       	andi	r24, 0xF0	; 240
 5d6:	cf 70       	andi	r28, 0x0F	; 15
 5d8:	dd 27       	eor	r29, r29
 5da:	8e 01       	movw	r16, r28
 5dc:	dd 0f       	add	r29, r29
 5de:	22 0b       	sbc	r18, r18
 5e0:	33 0b       	sbc	r19, r19
 5e2:	08 2b       	or	r16, r24
 5e4:	19 2b       	or	r17, r25
 5e6:	2a 2b       	or	r18, r26
 5e8:	3b 2b       	or	r19, r27
 5ea:	4a e1       	ldi	r20, 0x1A	; 26
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	8f 2d       	mov	r24, r15
 5f0:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	ff 90       	pop	r15
 5fe:	08 95       	ret

00000600 <setSwitchMode>:
 600:	ff 92       	push	r15
 602:	0f 93       	push	r16
 604:	1f 93       	push	r17
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	f8 2e       	mov	r15, r24
 60c:	eb 01       	movw	r28, r22
 60e:	6a e1       	ldi	r22, 0x1A	; 26
 610:	0e 94 cd 02 	call	0x59a	; 0x59a <getParam>
 614:	dc 01       	movw	r26, r24
 616:	cb 01       	movw	r24, r22
 618:	8f 7e       	andi	r24, 0xEF	; 239
 61a:	c0 71       	andi	r28, 0x10	; 16
 61c:	dd 27       	eor	r29, r29
 61e:	8e 01       	movw	r16, r28
 620:	dd 0f       	add	r29, r29
 622:	22 0b       	sbc	r18, r18
 624:	33 0b       	sbc	r19, r19
 626:	08 2b       	or	r16, r24
 628:	19 2b       	or	r17, r25
 62a:	2a 2b       	or	r18, r26
 62c:	3b 2b       	or	r19, r27
 62e:	4a e1       	ldi	r20, 0x1A	; 26
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	8f 2d       	mov	r24, r15
 634:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	1f 91       	pop	r17
 63e:	0f 91       	pop	r16
 640:	ff 90       	pop	r15
 642:	08 95       	ret

00000644 <setVoltageComp>:
 644:	ff 92       	push	r15
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	f8 2e       	mov	r15, r24
 650:	eb 01       	movw	r28, r22
 652:	6a e1       	ldi	r22, 0x1A	; 26
 654:	0e 94 cd 02 	call	0x59a	; 0x59a <getParam>
 658:	dc 01       	movw	r26, r24
 65a:	cb 01       	movw	r24, r22
 65c:	8f 7d       	andi	r24, 0xDF	; 223
 65e:	c0 72       	andi	r28, 0x20	; 32
 660:	dd 27       	eor	r29, r29
 662:	8e 01       	movw	r16, r28
 664:	dd 0f       	add	r29, r29
 666:	22 0b       	sbc	r18, r18
 668:	33 0b       	sbc	r19, r19
 66a:	08 2b       	or	r16, r24
 66c:	19 2b       	or	r17, r25
 66e:	2a 2b       	or	r18, r26
 670:	3b 2b       	or	r19, r27
 672:	4a e1       	ldi	r20, 0x1A	; 26
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	8f 2d       	mov	r24, r15
 678:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	1f 91       	pop	r17
 682:	0f 91       	pop	r16
 684:	ff 90       	pop	r15
 686:	08 95       	ret

00000688 <setPWMFreq>:
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
 68c:	cf 93       	push	r28
 68e:	c8 2f       	mov	r28, r24
 690:	6a e1       	ldi	r22, 0x1A	; 26
 692:	0e 94 cd 02 	call	0x59a	; 0x59a <getParam>
 696:	8b 01       	movw	r16, r22
 698:	9c 01       	movw	r18, r24
 69a:	13 70       	andi	r17, 0x03	; 3
 69c:	22 27       	eor	r18, r18
 69e:	33 27       	eor	r19, r19
 6a0:	4a e1       	ldi	r20, 0x1A	; 26
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	8c 2f       	mov	r24, r28
 6a6:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	08 95       	ret

000006b2 <setOCShutdown>:
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	d8 2f       	mov	r29, r24
 6bc:	c6 2f       	mov	r28, r22
 6be:	6a e1       	ldi	r22, 0x1A	; 26
 6c0:	0e 94 cd 02 	call	0x59a	; 0x59a <getParam>
 6c4:	8b 01       	movw	r16, r22
 6c6:	9c 01       	movw	r18, r24
 6c8:	0f 77       	andi	r16, 0x7F	; 127
 6ca:	c0 78       	andi	r28, 0x80	; 128
 6cc:	0c 2b       	or	r16, r28
 6ce:	4a e1       	ldi	r20, 0x1A	; 26
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	8d 2f       	mov	r24, r29
 6d4:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	08 95       	ret

000006e2 <setSlewRate>:
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	c8 2f       	mov	r28, r24
 6ec:	d6 2f       	mov	r29, r22
 6ee:	68 e1       	ldi	r22, 0x18	; 24
 6f0:	0e 94 cd 02 	call	0x59a	; 0x59a <getParam>
 6f4:	8b 01       	movw	r16, r22
 6f6:	9c 01       	movw	r18, r24
 6f8:	00 27       	eor	r16, r16
 6fa:	22 27       	eor	r18, r18
 6fc:	33 27       	eor	r19, r19
 6fe:	0d 2b       	or	r16, r29
 700:	48 e1       	ldi	r20, 0x18	; 24
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	8c 2f       	mov	r24, r28
 706:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	08 95       	ret

00000714 <maxSpdCalc>:
	return retVal;
}

unsigned long maxSpdCalc (unsigned long stepsParSec)
{
	unsigned long temp = ceil(stepsParSec* .065536);
 714:	0e 94 c6 04 	call	0x98c	; 0x98c <__floatunsisf>
 718:	2d eb       	ldi	r18, 0xBD	; 189
 71a:	37 e3       	ldi	r19, 0x37	; 55
 71c:	46 e8       	ldi	r20, 0x86	; 134
 71e:	5d e3       	ldi	r21, 0x3D	; 61
 720:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 724:	0e 94 80 04 	call	0x900	; 0x900 <ceil>
 728:	0e 94 97 04 	call	0x92e	; 0x92e <__fixunssfsi>
 72c:	61 15       	cp	r22, r1
 72e:	24 e0       	ldi	r18, 0x04	; 4
 730:	72 07       	cpc	r23, r18
 732:	81 05       	cpc	r24, r1
 734:	91 05       	cpc	r25, r1
 736:	20 f0       	brcs	.+8      	; 0x740 <maxSpdCalc+0x2c>
 738:	6f ef       	ldi	r22, 0xFF	; 255
 73a:	73 e0       	ldi	r23, 0x03	; 3
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	90 e0       	ldi	r25, 0x00	; 0
	if (temp > 0x000003FF) return 0x000003FF;
	else return temp;
}
 740:	08 95       	ret

00000742 <setMaxSpeed>:
	
	stepModeConfig |= (stepMode &0x07);
}

void setMaxSpeed(uint8_t motor, unsigned long stepsPerSecond)
{
 742:	0f 93       	push	r16
 744:	1f 93       	push	r17
 746:	cf 93       	push	r28
 748:	c8 2f       	mov	r28, r24
	unsigned long integerSpeed = maxSpdCalc(stepsPerSecond);
 74a:	cb 01       	movw	r24, r22
 74c:	ba 01       	movw	r22, r20
 74e:	0e 94 8a 03 	call	0x714	; 0x714 <maxSpdCalc>
 752:	8b 01       	movw	r16, r22
 754:	9c 01       	movw	r18, r24
	
	setParam(motor, 0, MAX_SPEED, integerSpeed);
 756:	47 e0       	ldi	r20, 0x07	; 7
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	8c 2f       	mov	r24, r28
 75c:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
}
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	08 95       	ret

00000768 <motorControl_Init>:
	unsigned long mask = 0xFFFFFFFF >> (32-bitLen);
	return retVal & mask;
}

void motorControl_Init(void)
{
 768:	ef 92       	push	r14
 76a:	ff 92       	push	r15
 76c:	0f 93       	push	r16
 76e:	1f 93       	push	r17
 770:	cf 93       	push	r28
	uint8_t i;
	uint16_t config[3];
	
	motorParam.RunKval = 0xA0;
 772:	e0 e0       	ldi	r30, 0x00	; 0
 774:	f1 e0       	ldi	r31, 0x01	; 1
 776:	80 ea       	ldi	r24, 0xA0	; 160
 778:	80 83       	st	Z, r24
	motorParam.HoldKval = 0xA0;
 77a:	81 83       	std	Z+1, r24	; 0x01
	motorParam.AccKval = 0xA0;
 77c:	82 83       	std	Z+2, r24	; 0x02
	motorParam.DecKval = 0xA0;
 77e:	83 83       	std	Z+3, r24	; 0x03
	motorParam.maxSpeed = 200;
 780:	88 ec       	ldi	r24, 0xC8	; 200
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	a0 e0       	ldi	r26, 0x00	; 0
 786:	b0 e0       	ldi	r27, 0x00	; 0
 788:	84 83       	std	Z+4, r24	; 0x04
 78a:	95 83       	std	Z+5, r25	; 0x05
 78c:	a6 83       	std	Z+6, r26	; 0x06
 78e:	b7 83       	std	Z+7, r27	; 0x07
	motorParam.Acc = 200;
 790:	80 87       	std	Z+8, r24	; 0x08
 792:	91 87       	std	Z+9, r25	; 0x09
 794:	a2 87       	std	Z+10, r26	; 0x0a
 796:	b3 87       	std	Z+11, r27	; 0x0b
	motorParam.Dec = 100;
 798:	84 e6       	ldi	r24, 0x64	; 100
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	a0 e0       	ldi	r26, 0x00	; 0
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	84 87       	std	Z+12, r24	; 0x0c
 7a2:	95 87       	std	Z+13, r25	; 0x0d
 7a4:	a6 87       	std	Z+14, r26	; 0x0e
 7a6:	b7 87       	std	Z+15, r27	; 0x0f
	
	powerSTEP01_GPIO_Init();
 7a8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <powerSTEP01_GPIO_Init>
	
	#ifdef reset
	releaseReset();
 7ac:	0e 94 7d 01 	call	0x2fa	; 0x2fa <releaseReset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7b0:	8f e9       	ldi	r24, 0x9F	; 159
 7b2:	9f e0       	ldi	r25, 0x0F	; 15
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	f1 f7       	brne	.-4      	; 0x7b4 <motorControl_Init+0x4c>
 7b8:	00 c0       	rjmp	.+0      	; 0x7ba <motorControl_Init+0x52>
 7ba:	00 00       	nop
	#endif
	_delay_ms(1);
	CSM_Low;
 7bc:	28 98       	cbi	0x05, 0	; 5
	SPIXfer(0x00);
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
	SPIXfer(0x00);
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
	SPIXfer(0x00);
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIXfer>
	CSM_High;
 7d0:	28 9a       	sbi	0x05, 0	; 5
	//setDeviceParam();
	
	for(i=1; i<4; i++)
 7d2:	c1 e0       	ldi	r28, 0x01	; 1
		setVoltageComp(i, VS_COMP_DISABLE);
		setSwitchMode(i, SW_USER);
		setOscMode(i, CONFIG_INT_16MHZ);
		setSTALL_TH(i, 0x00);
	
		setMaxSpeed(i, motorParam.maxSpeed);
 7d4:	0f 2e       	mov	r0, r31
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	ef 2e       	mov	r14, r31
 7da:	f1 e0       	ldi	r31, 0x01	; 1
 7dc:	ff 2e       	mov	r15, r31
 7de:	f0 2d       	mov	r31, r0
	CSM_High;
	//setDeviceParam();
	
	for(i=1; i<4; i++)
	{
		config[i-1] = getParam(i, CONFIG);
 7e0:	6a e1       	ldi	r22, 0x1A	; 26
 7e2:	8c 2f       	mov	r24, r28
 7e4:	0e 94 cd 02 	call	0x59a	; 0x59a <getParam>
		setSlewRate(i, SR_520V_us);
 7e8:	66 ea       	ldi	r22, 0xA6	; 166
 7ea:	8c 2f       	mov	r24, r28
 7ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <setSlewRate>
	setParam(motor, 0, CONFIG, configVal);
}

void configStepMode(uint8_t motor, uint8_t stepMode)
{
	uint8_t stepModeConfig = (uint8_t)getParam(motor, STEP_MODE);
 7f0:	66 e1       	ldi	r22, 0x16	; 22
 7f2:	8c 2f       	mov	r24, r28
 7f4:	0e 94 cd 02 	call	0x59a	; 0x59a <getParam>
	for(i=1; i<4; i++)
	{
		config[i-1] = getParam(i, CONFIG);
		setSlewRate(i, SR_520V_us);
		configStepMode(i, STEP_SEL_1_128);
		setOCD_TH(i, 8);
 7f8:	68 e0       	ldi	r22, 0x08	; 8
 7fa:	8c 2f       	mov	r24, r28
 7fc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setOCD_TH>
		setOCShutdown(i, OC_SD_ENABLE);
 800:	60 e8       	ldi	r22, 0x80	; 128
 802:	8c 2f       	mov	r24, r28
 804:	0e 94 59 03 	call	0x6b2	; 0x6b2 <setOCShutdown>
		setPWMFreq(i, PWM_DIV_1, PWM_MUL_0_75);
 808:	40 e0       	ldi	r20, 0x00	; 0
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	8c 2f       	mov	r24, r28
 80e:	0e 94 44 03 	call	0x688	; 0x688 <setPWMFreq>
		setVoltageComp(i, VS_COMP_DISABLE);
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	8c 2f       	mov	r24, r28
 818:	0e 94 22 03 	call	0x644	; 0x644 <setVoltageComp>
		setSwitchMode(i, SW_USER);
 81c:	60 e1       	ldi	r22, 0x10	; 16
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	8c 2f       	mov	r24, r28
 822:	0e 94 00 03 	call	0x600	; 0x600 <setSwitchMode>
		setOscMode(i, CONFIG_INT_16MHZ);
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	70 e0       	ldi	r23, 0x00	; 0
 82a:	8c 2f       	mov	r24, r28
 82c:	0e 94 de 02 	call	0x5bc	; 0x5bc <setOscMode>
		setSTALL_TH(i, 0x00);
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	8c 2f       	mov	r24, r28
 834:	0e 94 76 02 	call	0x4ec	; 0x4ec <setSTALL_TH>
	
		setMaxSpeed(i, motorParam.maxSpeed);
 838:	f7 01       	movw	r30, r14
 83a:	44 81       	ldd	r20, Z+4	; 0x04
 83c:	55 81       	ldd	r21, Z+5	; 0x05
 83e:	66 81       	ldd	r22, Z+6	; 0x06
 840:	77 81       	ldd	r23, Z+7	; 0x07
 842:	8c 2f       	mov	r24, r28
 844:	0e 94 a1 03 	call	0x742	; 0x742 <setMaxSpeed>
		setRunKval(i, motorParam.RunKval);
 848:	f7 01       	movw	r30, r14
 84a:	60 81       	ld	r22, Z
 84c:	8c 2f       	mov	r24, r28
 84e:	0e 94 35 02 	call	0x46a	; 0x46a <setRunKval>
		setHoldKval(i, motorParam.HoldKval);
 852:	f7 01       	movw	r30, r14
 854:	61 81       	ldd	r22, Z+1	; 0x01
 856:	8c 2f       	mov	r24, r28
 858:	0e 94 42 02 	call	0x484	; 0x484 <setHoldKval>
		setAccKval(i, motorParam.AccKval);
 85c:	f7 01       	movw	r30, r14
 85e:	62 81       	ldd	r22, Z+2	; 0x02
 860:	8c 2f       	mov	r24, r28
 862:	0e 94 4f 02 	call	0x49e	; 0x49e <setAccKval>
		setDecKval(i, motorParam.DecKval);
 866:	f7 01       	movw	r30, r14
 868:	63 81       	ldd	r22, Z+3	; 0x03
 86a:	8c 2f       	mov	r24, r28
 86c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <setDecKval>
		setAcc(i, motorParam.Acc);
 870:	f7 01       	movw	r30, r14
 872:	40 85       	ldd	r20, Z+8	; 0x08
 874:	51 85       	ldd	r21, Z+9	; 0x09
 876:	62 85       	ldd	r22, Z+10	; 0x0a
 878:	73 85       	ldd	r23, Z+11	; 0x0b
 87a:	8c 2f       	mov	r24, r28
 87c:	0e 94 83 02 	call	0x506	; 0x506 <setAcc>
		setDec(i, motorParam.Dec);
 880:	f7 01       	movw	r30, r14
 882:	44 85       	ldd	r20, Z+12	; 0x0c
 884:	55 85       	ldd	r21, Z+13	; 0x0d
 886:	66 85       	ldd	r22, Z+14	; 0x0e
 888:	77 85       	ldd	r23, Z+15	; 0x0f
 88a:	8c 2f       	mov	r24, r28
 88c:	0e 94 a8 02 	call	0x550	; 0x550 <setDec>
	
		setParam(i, 0, ALARM_EN, 0xAF);
 890:	0f ea       	ldi	r16, 0xAF	; 175
 892:	10 e0       	ldi	r17, 0x00	; 0
 894:	20 e0       	ldi	r18, 0x00	; 0
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	47 e1       	ldi	r20, 0x17	; 23
 89a:	60 e0       	ldi	r22, 0x00	; 0
 89c:	8c 2f       	mov	r24, r28
 89e:	0e 94 17 02 	call	0x42e	; 0x42e <setParam>
		getStatus(i);
 8a2:	8c 2f       	mov	r24, r28
 8a4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <getStatus>
	SPIXfer(0x00);
	SPIXfer(0x00);
	CSM_High;
	//setDeviceParam();
	
	for(i=1; i<4; i++)
 8a8:	cf 5f       	subi	r28, 0xFF	; 255
 8aa:	c4 30       	cpi	r28, 0x04	; 4
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <motorControl_Init+0x148>
 8ae:	98 cf       	rjmp	.-208    	; 0x7e0 <motorControl_Init+0x78>
	
		setParam(i, 0, ALARM_EN, 0xAF);
		getStatus(i);
	}
	
}
 8b0:	cf 91       	pop	r28
 8b2:	1f 91       	pop	r17
 8b4:	0f 91       	pop	r16
 8b6:	ff 90       	pop	r15
 8b8:	ef 90       	pop	r14
 8ba:	08 95       	ret

000008bc <PWMinit>:

#include "PWM.h"

void PWMinit(void)
{
	DDRB |= (1<<PORTB7);
 8bc:	27 9a       	sbi	0x04, 7	; 4
	TCCR0A |= (1<<COM0A1)|(1<<WGM00)|(1<<WGM01);
 8be:	84 b5       	in	r24, 0x24	; 36
 8c0:	83 68       	ori	r24, 0x83	; 131
 8c2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);
 8c4:	85 b5       	in	r24, 0x25	; 37
 8c6:	81 60       	ori	r24, 0x01	; 1
 8c8:	85 bd       	out	0x25, r24	; 37
 8ca:	08 95       	ret

000008cc <SPI_Init>:
* Deinitializes the SPI controller
*/
void SPIdeInit(void)
{
	//disable SPI
	SPCR &= ~(1<<SPE);
 8cc:	84 b1       	in	r24, 0x04	; 4
 8ce:	86 60       	ori	r24, 0x06	; 6
 8d0:	84 b9       	out	0x04, r24	; 4
 8d2:	8c b5       	in	r24, 0x2c	; 44
 8d4:	8d 65       	ori	r24, 0x5D	; 93
 8d6:	8c bd       	out	0x2c, r24	; 44
 8d8:	8d b5       	in	r24, 0x2d	; 45
 8da:	81 60       	ori	r24, 0x01	; 1
 8dc:	8d bd       	out	0x2d, r24	; 45
 8de:	08 95       	ret

000008e0 <transfer>:
/*
* Transfers one byte over the SPI bus
*/
uint8_t transfer(uint8_t data)
{
	SPDR = data;
 8e0:	8e bd       	out	0x2e, r24	; 46
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
	 * information from Arduino SPI.h library
     */
	_NOP();
 8e2:	00 00       	nop
	
	//wait for transmission to end
	while(!(SPSR & (1<<SPIF)));
 8e4:	0d b4       	in	r0, 0x2d	; 45
 8e6:	07 fe       	sbrs	r0, 7
 8e8:	fd cf       	rjmp	.-6      	; 0x8e4 <transfer+0x4>
	
	
	return SPDR;
 8ea:	8e b5       	in	r24, 0x2e	; 46
}
 8ec:	08 95       	ret

000008ee <main>:
#include "Library/PWM/PWM.h"
#include "Library/powerSTEP01/powerSTEP01.h"

int main(void)
{
	SPI_Init();
 8ee:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_Init>
	motorControl_Init();
 8f2:	0e 94 b4 03 	call	0x768	; 0x768 <motorControl_Init>
	PWMinit();
 8f6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <PWMinit>
	ADCInit();
 8fa:	0e 94 85 00 	call	0x10a	; 0x10a <ADCInit>
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <main+0x10>

00000900 <ceil>:
 900:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_trunc>
 904:	90 f0       	brcs	.+36     	; 0x92a <ceil+0x2a>
 906:	9f 37       	cpi	r25, 0x7F	; 127
 908:	48 f4       	brcc	.+18     	; 0x91c <ceil+0x1c>
 90a:	91 11       	cpse	r25, r1
 90c:	16 f4       	brtc	.+4      	; 0x912 <ceil+0x12>
 90e:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_szero>
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	70 e0       	ldi	r23, 0x00	; 0
 916:	80 e8       	ldi	r24, 0x80	; 128
 918:	9f e3       	ldi	r25, 0x3F	; 63
 91a:	08 95       	ret
 91c:	26 f0       	brts	.+8      	; 0x926 <ceil+0x26>
 91e:	1b 16       	cp	r1, r27
 920:	61 1d       	adc	r22, r1
 922:	71 1d       	adc	r23, r1
 924:	81 1d       	adc	r24, r1
 926:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_mintl>
 92a:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_mpack>

0000092e <__fixunssfsi>:
 92e:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_splitA>
 932:	88 f0       	brcs	.+34     	; 0x956 <__fixunssfsi+0x28>
 934:	9f 57       	subi	r25, 0x7F	; 127
 936:	98 f0       	brcs	.+38     	; 0x95e <__fixunssfsi+0x30>
 938:	b9 2f       	mov	r27, r25
 93a:	99 27       	eor	r25, r25
 93c:	b7 51       	subi	r27, 0x17	; 23
 93e:	b0 f0       	brcs	.+44     	; 0x96c <__fixunssfsi+0x3e>
 940:	e1 f0       	breq	.+56     	; 0x97a <__fixunssfsi+0x4c>
 942:	66 0f       	add	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	1a f0       	brmi	.+6      	; 0x952 <__fixunssfsi+0x24>
 94c:	ba 95       	dec	r27
 94e:	c9 f7       	brne	.-14     	; 0x942 <__fixunssfsi+0x14>
 950:	14 c0       	rjmp	.+40     	; 0x97a <__fixunssfsi+0x4c>
 952:	b1 30       	cpi	r27, 0x01	; 1
 954:	91 f0       	breq	.+36     	; 0x97a <__fixunssfsi+0x4c>
 956:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_zero>
 95a:	b1 e0       	ldi	r27, 0x01	; 1
 95c:	08 95       	ret
 95e:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_zero>
 962:	67 2f       	mov	r22, r23
 964:	78 2f       	mov	r23, r24
 966:	88 27       	eor	r24, r24
 968:	b8 5f       	subi	r27, 0xF8	; 248
 96a:	39 f0       	breq	.+14     	; 0x97a <__fixunssfsi+0x4c>
 96c:	b9 3f       	cpi	r27, 0xF9	; 249
 96e:	cc f3       	brlt	.-14     	; 0x962 <__fixunssfsi+0x34>
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b3 95       	inc	r27
 978:	d9 f7       	brne	.-10     	; 0x970 <__fixunssfsi+0x42>
 97a:	3e f4       	brtc	.+14     	; 0x98a <__fixunssfsi+0x5c>
 97c:	90 95       	com	r25
 97e:	80 95       	com	r24
 980:	70 95       	com	r23
 982:	61 95       	neg	r22
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	08 95       	ret

0000098c <__floatunsisf>:
 98c:	e8 94       	clt
 98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__floatsisf+0x12>

00000990 <__floatsisf>:
 990:	97 fb       	bst	r25, 7
 992:	3e f4       	brtc	.+14     	; 0x9a2 <__floatsisf+0x12>
 994:	90 95       	com	r25
 996:	80 95       	com	r24
 998:	70 95       	com	r23
 99a:	61 95       	neg	r22
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	8f 4f       	sbci	r24, 0xFF	; 255
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	99 23       	and	r25, r25
 9a4:	a9 f0       	breq	.+42     	; 0x9d0 <__floatsisf+0x40>
 9a6:	f9 2f       	mov	r31, r25
 9a8:	96 e9       	ldi	r25, 0x96	; 150
 9aa:	bb 27       	eor	r27, r27
 9ac:	93 95       	inc	r25
 9ae:	f6 95       	lsr	r31
 9b0:	87 95       	ror	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	b7 95       	ror	r27
 9b8:	f1 11       	cpse	r31, r1
 9ba:	f8 cf       	rjmp	.-16     	; 0x9ac <__floatsisf+0x1c>
 9bc:	fa f4       	brpl	.+62     	; 0x9fc <__floatsisf+0x6c>
 9be:	bb 0f       	add	r27, r27
 9c0:	11 f4       	brne	.+4      	; 0x9c6 <__floatsisf+0x36>
 9c2:	60 ff       	sbrs	r22, 0
 9c4:	1b c0       	rjmp	.+54     	; 0x9fc <__floatsisf+0x6c>
 9c6:	6f 5f       	subi	r22, 0xFF	; 255
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ca:	8f 4f       	sbci	r24, 0xFF	; 255
 9cc:	9f 4f       	sbci	r25, 0xFF	; 255
 9ce:	16 c0       	rjmp	.+44     	; 0x9fc <__floatsisf+0x6c>
 9d0:	88 23       	and	r24, r24
 9d2:	11 f0       	breq	.+4      	; 0x9d8 <__floatsisf+0x48>
 9d4:	96 e9       	ldi	r25, 0x96	; 150
 9d6:	11 c0       	rjmp	.+34     	; 0x9fa <__floatsisf+0x6a>
 9d8:	77 23       	and	r23, r23
 9da:	21 f0       	breq	.+8      	; 0x9e4 <__floatsisf+0x54>
 9dc:	9e e8       	ldi	r25, 0x8E	; 142
 9de:	87 2f       	mov	r24, r23
 9e0:	76 2f       	mov	r23, r22
 9e2:	05 c0       	rjmp	.+10     	; 0x9ee <__floatsisf+0x5e>
 9e4:	66 23       	and	r22, r22
 9e6:	71 f0       	breq	.+28     	; 0xa04 <__floatsisf+0x74>
 9e8:	96 e8       	ldi	r25, 0x86	; 134
 9ea:	86 2f       	mov	r24, r22
 9ec:	70 e0       	ldi	r23, 0x00	; 0
 9ee:	60 e0       	ldi	r22, 0x00	; 0
 9f0:	2a f0       	brmi	.+10     	; 0x9fc <__floatsisf+0x6c>
 9f2:	9a 95       	dec	r25
 9f4:	66 0f       	add	r22, r22
 9f6:	77 1f       	adc	r23, r23
 9f8:	88 1f       	adc	r24, r24
 9fa:	da f7       	brpl	.-10     	; 0x9f2 <__floatsisf+0x62>
 9fc:	88 0f       	add	r24, r24
 9fe:	96 95       	lsr	r25
 a00:	87 95       	ror	r24
 a02:	97 f9       	bld	r25, 7
 a04:	08 95       	ret

00000a06 <__fp_mintl>:
 a06:	88 23       	and	r24, r24
 a08:	71 f4       	brne	.+28     	; 0xa26 <__fp_mintl+0x20>
 a0a:	77 23       	and	r23, r23
 a0c:	21 f0       	breq	.+8      	; 0xa16 <__fp_mintl+0x10>
 a0e:	98 50       	subi	r25, 0x08	; 8
 a10:	87 2b       	or	r24, r23
 a12:	76 2f       	mov	r23, r22
 a14:	07 c0       	rjmp	.+14     	; 0xa24 <__fp_mintl+0x1e>
 a16:	66 23       	and	r22, r22
 a18:	11 f4       	brne	.+4      	; 0xa1e <__fp_mintl+0x18>
 a1a:	99 27       	eor	r25, r25
 a1c:	0d c0       	rjmp	.+26     	; 0xa38 <__fp_mintl+0x32>
 a1e:	90 51       	subi	r25, 0x10	; 16
 a20:	86 2b       	or	r24, r22
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	2a f0       	brmi	.+10     	; 0xa32 <__fp_mintl+0x2c>
 a28:	9a 95       	dec	r25
 a2a:	66 0f       	add	r22, r22
 a2c:	77 1f       	adc	r23, r23
 a2e:	88 1f       	adc	r24, r24
 a30:	da f7       	brpl	.-10     	; 0xa28 <__fp_mintl+0x22>
 a32:	88 0f       	add	r24, r24
 a34:	96 95       	lsr	r25
 a36:	87 95       	ror	r24
 a38:	97 f9       	bld	r25, 7
 a3a:	08 95       	ret

00000a3c <__fp_mpack>:
 a3c:	9f 3f       	cpi	r25, 0xFF	; 255
 a3e:	31 f0       	breq	.+12     	; 0xa4c <__fp_mpack_finite+0xc>

00000a40 <__fp_mpack_finite>:
 a40:	91 50       	subi	r25, 0x01	; 1
 a42:	20 f4       	brcc	.+8      	; 0xa4c <__fp_mpack_finite+0xc>
 a44:	87 95       	ror	r24
 a46:	77 95       	ror	r23
 a48:	67 95       	ror	r22
 a4a:	b7 95       	ror	r27
 a4c:	88 0f       	add	r24, r24
 a4e:	91 1d       	adc	r25, r1
 a50:	96 95       	lsr	r25
 a52:	87 95       	ror	r24
 a54:	97 f9       	bld	r25, 7
 a56:	08 95       	ret

00000a58 <__fp_split3>:
 a58:	57 fd       	sbrc	r21, 7
 a5a:	90 58       	subi	r25, 0x80	; 128
 a5c:	44 0f       	add	r20, r20
 a5e:	55 1f       	adc	r21, r21
 a60:	59 f0       	breq	.+22     	; 0xa78 <__fp_splitA+0x10>
 a62:	5f 3f       	cpi	r21, 0xFF	; 255
 a64:	71 f0       	breq	.+28     	; 0xa82 <__fp_splitA+0x1a>
 a66:	47 95       	ror	r20

00000a68 <__fp_splitA>:
 a68:	88 0f       	add	r24, r24
 a6a:	97 fb       	bst	r25, 7
 a6c:	99 1f       	adc	r25, r25
 a6e:	61 f0       	breq	.+24     	; 0xa88 <__fp_splitA+0x20>
 a70:	9f 3f       	cpi	r25, 0xFF	; 255
 a72:	79 f0       	breq	.+30     	; 0xa92 <__fp_splitA+0x2a>
 a74:	87 95       	ror	r24
 a76:	08 95       	ret
 a78:	12 16       	cp	r1, r18
 a7a:	13 06       	cpc	r1, r19
 a7c:	14 06       	cpc	r1, r20
 a7e:	55 1f       	adc	r21, r21
 a80:	f2 cf       	rjmp	.-28     	; 0xa66 <__fp_split3+0xe>
 a82:	46 95       	lsr	r20
 a84:	f1 df       	rcall	.-30     	; 0xa68 <__fp_splitA>
 a86:	08 c0       	rjmp	.+16     	; 0xa98 <__fp_splitA+0x30>
 a88:	16 16       	cp	r1, r22
 a8a:	17 06       	cpc	r1, r23
 a8c:	18 06       	cpc	r1, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	f1 cf       	rjmp	.-30     	; 0xa74 <__fp_splitA+0xc>
 a92:	86 95       	lsr	r24
 a94:	71 05       	cpc	r23, r1
 a96:	61 05       	cpc	r22, r1
 a98:	08 94       	sec
 a9a:	08 95       	ret

00000a9c <__fp_trunc>:
 a9c:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_splitA>
 aa0:	a0 f0       	brcs	.+40     	; 0xaca <__fp_trunc+0x2e>
 aa2:	be e7       	ldi	r27, 0x7E	; 126
 aa4:	b9 17       	cp	r27, r25
 aa6:	88 f4       	brcc	.+34     	; 0xaca <__fp_trunc+0x2e>
 aa8:	bb 27       	eor	r27, r27
 aaa:	9f 38       	cpi	r25, 0x8F	; 143
 aac:	60 f4       	brcc	.+24     	; 0xac6 <__fp_trunc+0x2a>
 aae:	16 16       	cp	r1, r22
 ab0:	b1 1d       	adc	r27, r1
 ab2:	67 2f       	mov	r22, r23
 ab4:	78 2f       	mov	r23, r24
 ab6:	88 27       	eor	r24, r24
 ab8:	98 5f       	subi	r25, 0xF8	; 248
 aba:	f7 cf       	rjmp	.-18     	; 0xaaa <__fp_trunc+0xe>
 abc:	86 95       	lsr	r24
 abe:	77 95       	ror	r23
 ac0:	67 95       	ror	r22
 ac2:	b1 1d       	adc	r27, r1
 ac4:	93 95       	inc	r25
 ac6:	96 39       	cpi	r25, 0x96	; 150
 ac8:	c8 f3       	brcs	.-14     	; 0xabc <__fp_trunc+0x20>
 aca:	08 95       	ret

00000acc <__fp_zero>:
 acc:	e8 94       	clt

00000ace <__fp_szero>:
 ace:	bb 27       	eor	r27, r27
 ad0:	66 27       	eor	r22, r22
 ad2:	77 27       	eor	r23, r23
 ad4:	cb 01       	movw	r24, r22
 ad6:	97 f9       	bld	r25, 7
 ad8:	08 95       	ret

00000ada <__mulsf3>:
 ada:	0e 94 80 05 	call	0xb00	; 0xb00 <__mulsf3x>
 ade:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__fp_round>
 ae2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__fp_pscA>
 ae6:	38 f0       	brcs	.+14     	; 0xaf6 <__mulsf3+0x1c>
 ae8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_pscB>
 aec:	20 f0       	brcs	.+8      	; 0xaf6 <__mulsf3+0x1c>
 aee:	95 23       	and	r25, r21
 af0:	11 f0       	breq	.+4      	; 0xaf6 <__mulsf3+0x1c>
 af2:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__fp_inf>
 af6:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_nan>
 afa:	11 24       	eor	r1, r1
 afc:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_szero>

00000b00 <__mulsf3x>:
 b00:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_split3>
 b04:	70 f3       	brcs	.-36     	; 0xae2 <__mulsf3+0x8>

00000b06 <__mulsf3_pse>:
 b06:	95 9f       	mul	r25, r21
 b08:	c1 f3       	breq	.-16     	; 0xafa <__mulsf3+0x20>
 b0a:	95 0f       	add	r25, r21
 b0c:	50 e0       	ldi	r21, 0x00	; 0
 b0e:	55 1f       	adc	r21, r21
 b10:	62 9f       	mul	r22, r18
 b12:	f0 01       	movw	r30, r0
 b14:	72 9f       	mul	r23, r18
 b16:	bb 27       	eor	r27, r27
 b18:	f0 0d       	add	r31, r0
 b1a:	b1 1d       	adc	r27, r1
 b1c:	63 9f       	mul	r22, r19
 b1e:	aa 27       	eor	r26, r26
 b20:	f0 0d       	add	r31, r0
 b22:	b1 1d       	adc	r27, r1
 b24:	aa 1f       	adc	r26, r26
 b26:	64 9f       	mul	r22, r20
 b28:	66 27       	eor	r22, r22
 b2a:	b0 0d       	add	r27, r0
 b2c:	a1 1d       	adc	r26, r1
 b2e:	66 1f       	adc	r22, r22
 b30:	82 9f       	mul	r24, r18
 b32:	22 27       	eor	r18, r18
 b34:	b0 0d       	add	r27, r0
 b36:	a1 1d       	adc	r26, r1
 b38:	62 1f       	adc	r22, r18
 b3a:	73 9f       	mul	r23, r19
 b3c:	b0 0d       	add	r27, r0
 b3e:	a1 1d       	adc	r26, r1
 b40:	62 1f       	adc	r22, r18
 b42:	83 9f       	mul	r24, r19
 b44:	a0 0d       	add	r26, r0
 b46:	61 1d       	adc	r22, r1
 b48:	22 1f       	adc	r18, r18
 b4a:	74 9f       	mul	r23, r20
 b4c:	33 27       	eor	r19, r19
 b4e:	a0 0d       	add	r26, r0
 b50:	61 1d       	adc	r22, r1
 b52:	23 1f       	adc	r18, r19
 b54:	84 9f       	mul	r24, r20
 b56:	60 0d       	add	r22, r0
 b58:	21 1d       	adc	r18, r1
 b5a:	82 2f       	mov	r24, r18
 b5c:	76 2f       	mov	r23, r22
 b5e:	6a 2f       	mov	r22, r26
 b60:	11 24       	eor	r1, r1
 b62:	9f 57       	subi	r25, 0x7F	; 127
 b64:	50 40       	sbci	r21, 0x00	; 0
 b66:	9a f0       	brmi	.+38     	; 0xb8e <__mulsf3_pse+0x88>
 b68:	f1 f0       	breq	.+60     	; 0xba6 <__mulsf3_pse+0xa0>
 b6a:	88 23       	and	r24, r24
 b6c:	4a f0       	brmi	.+18     	; 0xb80 <__mulsf3_pse+0x7a>
 b6e:	ee 0f       	add	r30, r30
 b70:	ff 1f       	adc	r31, r31
 b72:	bb 1f       	adc	r27, r27
 b74:	66 1f       	adc	r22, r22
 b76:	77 1f       	adc	r23, r23
 b78:	88 1f       	adc	r24, r24
 b7a:	91 50       	subi	r25, 0x01	; 1
 b7c:	50 40       	sbci	r21, 0x00	; 0
 b7e:	a9 f7       	brne	.-22     	; 0xb6a <__mulsf3_pse+0x64>
 b80:	9e 3f       	cpi	r25, 0xFE	; 254
 b82:	51 05       	cpc	r21, r1
 b84:	80 f0       	brcs	.+32     	; 0xba6 <__mulsf3_pse+0xa0>
 b86:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__fp_inf>
 b8a:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_szero>
 b8e:	5f 3f       	cpi	r21, 0xFF	; 255
 b90:	e4 f3       	brlt	.-8      	; 0xb8a <__mulsf3_pse+0x84>
 b92:	98 3e       	cpi	r25, 0xE8	; 232
 b94:	d4 f3       	brlt	.-12     	; 0xb8a <__mulsf3_pse+0x84>
 b96:	86 95       	lsr	r24
 b98:	77 95       	ror	r23
 b9a:	67 95       	ror	r22
 b9c:	b7 95       	ror	r27
 b9e:	f7 95       	ror	r31
 ba0:	e7 95       	ror	r30
 ba2:	9f 5f       	subi	r25, 0xFF	; 255
 ba4:	c1 f7       	brne	.-16     	; 0xb96 <__mulsf3_pse+0x90>
 ba6:	fe 2b       	or	r31, r30
 ba8:	88 0f       	add	r24, r24
 baa:	91 1d       	adc	r25, r1
 bac:	96 95       	lsr	r25
 bae:	87 95       	ror	r24
 bb0:	97 f9       	bld	r25, 7
 bb2:	08 95       	ret

00000bb4 <__fp_inf>:
 bb4:	97 f9       	bld	r25, 7
 bb6:	9f 67       	ori	r25, 0x7F	; 127
 bb8:	80 e8       	ldi	r24, 0x80	; 128
 bba:	70 e0       	ldi	r23, 0x00	; 0
 bbc:	60 e0       	ldi	r22, 0x00	; 0
 bbe:	08 95       	ret

00000bc0 <__fp_nan>:
 bc0:	9f ef       	ldi	r25, 0xFF	; 255
 bc2:	80 ec       	ldi	r24, 0xC0	; 192
 bc4:	08 95       	ret

00000bc6 <__fp_pscA>:
 bc6:	00 24       	eor	r0, r0
 bc8:	0a 94       	dec	r0
 bca:	16 16       	cp	r1, r22
 bcc:	17 06       	cpc	r1, r23
 bce:	18 06       	cpc	r1, r24
 bd0:	09 06       	cpc	r0, r25
 bd2:	08 95       	ret

00000bd4 <__fp_pscB>:
 bd4:	00 24       	eor	r0, r0
 bd6:	0a 94       	dec	r0
 bd8:	12 16       	cp	r1, r18
 bda:	13 06       	cpc	r1, r19
 bdc:	14 06       	cpc	r1, r20
 bde:	05 06       	cpc	r0, r21
 be0:	08 95       	ret

00000be2 <__fp_round>:
 be2:	09 2e       	mov	r0, r25
 be4:	03 94       	inc	r0
 be6:	00 0c       	add	r0, r0
 be8:	11 f4       	brne	.+4      	; 0xbee <__fp_round+0xc>
 bea:	88 23       	and	r24, r24
 bec:	52 f0       	brmi	.+20     	; 0xc02 <__fp_round+0x20>
 bee:	bb 0f       	add	r27, r27
 bf0:	40 f4       	brcc	.+16     	; 0xc02 <__fp_round+0x20>
 bf2:	bf 2b       	or	r27, r31
 bf4:	11 f4       	brne	.+4      	; 0xbfa <__fp_round+0x18>
 bf6:	60 ff       	sbrs	r22, 0
 bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__fp_round+0x20>
 bfa:	6f 5f       	subi	r22, 0xFF	; 255
 bfc:	7f 4f       	sbci	r23, 0xFF	; 255
 bfe:	8f 4f       	sbci	r24, 0xFF	; 255
 c00:	9f 4f       	sbci	r25, 0xFF	; 255
 c02:	08 95       	ret

00000c04 <__tablejump2__>:
 c04:	ee 0f       	add	r30, r30
 c06:	ff 1f       	adc	r31, r31
 c08:	05 90       	lpm	r0, Z+
 c0a:	f4 91       	lpm	r31, Z
 c0c:	e0 2d       	mov	r30, r0
 c0e:	09 94       	ijmp

00000c10 <_exit>:
 c10:	f8 94       	cli

00000c12 <__stop_program>:
 c12:	ff cf       	rjmp	.-2      	; 0xc12 <__stop_program>
