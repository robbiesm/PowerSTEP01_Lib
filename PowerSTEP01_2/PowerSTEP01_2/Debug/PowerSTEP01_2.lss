
PowerSTEP01_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b40  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4a  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000436  00000000  00000000  000018fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f6  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  0000227e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002296  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a0 30       	cpi	r26, 0x00	; 0
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  cc:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <getADC>:
}

void getADC(void)
{
	uint16_t adcval;
	ADCSRA |= (1 << ADSC); //start conversion
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));	//wait until conversion is complete
  de:	80 81       	ld	r24, Z
  e0:	86 fd       	sbrc	r24, 6
  e2:	fd cf       	rjmp	.-6      	; 0xde <getADC+0xa>
	adcval = ((ADCH & 0b00000011) << 8);
  e4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e8:	83 70       	andi	r24, 0x03	; 3
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	98 2f       	mov	r25, r24
  ee:	88 27       	eor	r24, r24
	adcval |= ADCL;
  f0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f4:	82 2b       	or	r24, r18
	
	if(adcval < 32)							  //  0 0 0 0 / 0 - 1023
  f6:	80 32       	cpi	r24, 0x20	; 32
  f8:	91 05       	cpc	r25, r1
  fa:	28 f4       	brcc	.+10     	; 0x106 <getADC+0x32>
	{
		SWR &= 0b11110000;					//general purpose register, keep 4 MSB's, clear 4 LSB's
  fc:	2e b3       	in	r18, 0x1e	; 30
  fe:	20 7f       	andi	r18, 0xF0	; 240
 100:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00000000;					//use 4 LSB's for switch values
 102:	2e b3       	in	r18, 0x1e	; 30
 104:	2e bb       	out	0x1e, r18	; 30
	}
	if((32 < adcval) && (adcval < 96))        //  0 0 0 1 / 0 - 1023
 106:	9c 01       	movw	r18, r24
 108:	21 52       	subi	r18, 0x21	; 33
 10a:	31 09       	sbc	r19, r1
 10c:	2f 33       	cpi	r18, 0x3F	; 63
 10e:	31 05       	cpc	r19, r1
 110:	20 f4       	brcc	.+8      	; 0x11a <getADC+0x46>
	{
		SWR &= 0b11110000;
 112:	2e b3       	in	r18, 0x1e	; 30
 114:	20 7f       	andi	r18, 0xF0	; 240
 116:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00000001;
 118:	f0 9a       	sbi	0x1e, 0	; 30
	}
	if((96 < adcval) && (adcval < 160))        //  0 0 1 0 / 0 - 1023
 11a:	9c 01       	movw	r18, r24
 11c:	21 56       	subi	r18, 0x61	; 97
 11e:	31 09       	sbc	r19, r1
 120:	2f 33       	cpi	r18, 0x3F	; 63
 122:	31 05       	cpc	r19, r1
 124:	20 f4       	brcc	.+8      	; 0x12e <getADC+0x5a>
	{
		SWR &= 0b11110000;
 126:	2e b3       	in	r18, 0x1e	; 30
 128:	20 7f       	andi	r18, 0xF0	; 240
 12a:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00000010;
 12c:	f1 9a       	sbi	0x1e, 1	; 30
	}
	if((160 < adcval) && (adcval < 224))        //  0 0 1 1 / 0 - 1023
 12e:	9c 01       	movw	r18, r24
 130:	21 5a       	subi	r18, 0xA1	; 161
 132:	31 09       	sbc	r19, r1
 134:	2f 33       	cpi	r18, 0x3F	; 63
 136:	31 05       	cpc	r19, r1
 138:	30 f4       	brcc	.+12     	; 0x146 <getADC+0x72>
	{
		SWR &= 0b11110000;
 13a:	2e b3       	in	r18, 0x1e	; 30
 13c:	20 7f       	andi	r18, 0xF0	; 240
 13e:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00000011;
 140:	2e b3       	in	r18, 0x1e	; 30
 142:	23 60       	ori	r18, 0x03	; 3
 144:	2e bb       	out	0x1e, r18	; 30
	}
	if((224 < adcval) && (adcval < 288))        //  0 1 0 0 / 0 - 1023
 146:	9c 01       	movw	r18, r24
 148:	21 5e       	subi	r18, 0xE1	; 225
 14a:	31 09       	sbc	r19, r1
 14c:	2f 33       	cpi	r18, 0x3F	; 63
 14e:	31 05       	cpc	r19, r1
 150:	20 f4       	brcc	.+8      	; 0x15a <getADC+0x86>
	{
		SWR &= 0b11110000;
 152:	2e b3       	in	r18, 0x1e	; 30
 154:	20 7f       	andi	r18, 0xF0	; 240
 156:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00000100;
 158:	f2 9a       	sbi	0x1e, 2	; 30
	}
	if((288 < adcval) && (adcval < 352))        //  0 1 0 1 / 0 - 1023
 15a:	9c 01       	movw	r18, r24
 15c:	21 52       	subi	r18, 0x21	; 33
 15e:	31 40       	sbci	r19, 0x01	; 1
 160:	2f 33       	cpi	r18, 0x3F	; 63
 162:	31 05       	cpc	r19, r1
 164:	30 f4       	brcc	.+12     	; 0x172 <getADC+0x9e>
	{
		SWR &= 0b11110000;
 166:	2e b3       	in	r18, 0x1e	; 30
 168:	20 7f       	andi	r18, 0xF0	; 240
 16a:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00000101;
 16c:	2e b3       	in	r18, 0x1e	; 30
 16e:	25 60       	ori	r18, 0x05	; 5
 170:	2e bb       	out	0x1e, r18	; 30
	}
	if((352 < adcval) && (adcval < 416))        //  0 1 1 0 / 0 - 1023
 172:	9c 01       	movw	r18, r24
 174:	21 56       	subi	r18, 0x61	; 97
 176:	31 40       	sbci	r19, 0x01	; 1
 178:	2f 33       	cpi	r18, 0x3F	; 63
 17a:	31 05       	cpc	r19, r1
 17c:	30 f4       	brcc	.+12     	; 0x18a <getADC+0xb6>
	{
		SWR &= 0b11110000;
 17e:	2e b3       	in	r18, 0x1e	; 30
 180:	20 7f       	andi	r18, 0xF0	; 240
 182:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00000110;
 184:	2e b3       	in	r18, 0x1e	; 30
 186:	26 60       	ori	r18, 0x06	; 6
 188:	2e bb       	out	0x1e, r18	; 30
	}
	if((416 < adcval) && (adcval < 480))        //  0 1 1 1 / 0 - 1023
 18a:	9c 01       	movw	r18, r24
 18c:	21 5a       	subi	r18, 0xA1	; 161
 18e:	31 40       	sbci	r19, 0x01	; 1
 190:	2f 33       	cpi	r18, 0x3F	; 63
 192:	31 05       	cpc	r19, r1
 194:	30 f4       	brcc	.+12     	; 0x1a2 <getADC+0xce>
	{
		SWR &= 0b11110000;
 196:	2e b3       	in	r18, 0x1e	; 30
 198:	20 7f       	andi	r18, 0xF0	; 240
 19a:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00000111;
 19c:	2e b3       	in	r18, 0x1e	; 30
 19e:	27 60       	ori	r18, 0x07	; 7
 1a0:	2e bb       	out	0x1e, r18	; 30
	}
	if((480 < adcval) && (adcval < 544))        //  1 0 0 0 / 0 - 1023
 1a2:	9c 01       	movw	r18, r24
 1a4:	21 5e       	subi	r18, 0xE1	; 225
 1a6:	31 40       	sbci	r19, 0x01	; 1
 1a8:	2f 33       	cpi	r18, 0x3F	; 63
 1aa:	31 05       	cpc	r19, r1
 1ac:	20 f4       	brcc	.+8      	; 0x1b6 <getADC+0xe2>
	{
		SWR &= 0b11110000;
 1ae:	2e b3       	in	r18, 0x1e	; 30
 1b0:	20 7f       	andi	r18, 0xF0	; 240
 1b2:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00001000;
 1b4:	f3 9a       	sbi	0x1e, 3	; 30
	}
	if((544 < adcval) && (adcval < 608))        //  1 0 0 1 / 0 - 1023
 1b6:	9c 01       	movw	r18, r24
 1b8:	21 52       	subi	r18, 0x21	; 33
 1ba:	32 40       	sbci	r19, 0x02	; 2
 1bc:	2f 33       	cpi	r18, 0x3F	; 63
 1be:	31 05       	cpc	r19, r1
 1c0:	30 f4       	brcc	.+12     	; 0x1ce <getADC+0xfa>
	{
		SWR &= 0b11110000;
 1c2:	2e b3       	in	r18, 0x1e	; 30
 1c4:	20 7f       	andi	r18, 0xF0	; 240
 1c6:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00001001;
 1c8:	2e b3       	in	r18, 0x1e	; 30
 1ca:	29 60       	ori	r18, 0x09	; 9
 1cc:	2e bb       	out	0x1e, r18	; 30
	}
	if((608 < adcval) && (adcval < 672))        //  1 0 1 0 / 0 - 1023
 1ce:	9c 01       	movw	r18, r24
 1d0:	21 56       	subi	r18, 0x61	; 97
 1d2:	32 40       	sbci	r19, 0x02	; 2
 1d4:	2f 33       	cpi	r18, 0x3F	; 63
 1d6:	31 05       	cpc	r19, r1
 1d8:	30 f4       	brcc	.+12     	; 0x1e6 <getADC+0x112>
	{
		SWR &= 0b11110000;
 1da:	2e b3       	in	r18, 0x1e	; 30
 1dc:	20 7f       	andi	r18, 0xF0	; 240
 1de:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00001010;
 1e0:	2e b3       	in	r18, 0x1e	; 30
 1e2:	2a 60       	ori	r18, 0x0A	; 10
 1e4:	2e bb       	out	0x1e, r18	; 30
	}
	if((672 < adcval) && (adcval < 736))        //  1 0 1 1 / 0 - 1023
 1e6:	9c 01       	movw	r18, r24
 1e8:	21 5a       	subi	r18, 0xA1	; 161
 1ea:	32 40       	sbci	r19, 0x02	; 2
 1ec:	2f 33       	cpi	r18, 0x3F	; 63
 1ee:	31 05       	cpc	r19, r1
 1f0:	30 f4       	brcc	.+12     	; 0x1fe <getADC+0x12a>
	{
		SWR &= 0b11110000;
 1f2:	2e b3       	in	r18, 0x1e	; 30
 1f4:	20 7f       	andi	r18, 0xF0	; 240
 1f6:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00001011;
 1f8:	2e b3       	in	r18, 0x1e	; 30
 1fa:	2b 60       	ori	r18, 0x0B	; 11
 1fc:	2e bb       	out	0x1e, r18	; 30
	}
	if((736 < adcval) && (adcval < 800))        //  1 1 0 0 / 0 - 1023
 1fe:	9c 01       	movw	r18, r24
 200:	21 5e       	subi	r18, 0xE1	; 225
 202:	32 40       	sbci	r19, 0x02	; 2
 204:	2f 33       	cpi	r18, 0x3F	; 63
 206:	31 05       	cpc	r19, r1
 208:	30 f4       	brcc	.+12     	; 0x216 <getADC+0x142>
	{
		SWR &= 0b11110000;
 20a:	2e b3       	in	r18, 0x1e	; 30
 20c:	20 7f       	andi	r18, 0xF0	; 240
 20e:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00001100;
 210:	2e b3       	in	r18, 0x1e	; 30
 212:	2c 60       	ori	r18, 0x0C	; 12
 214:	2e bb       	out	0x1e, r18	; 30
	}
	if((800 < adcval) && (adcval < 864))        //  1 1 0 1 / 0 - 1023
 216:	9c 01       	movw	r18, r24
 218:	21 52       	subi	r18, 0x21	; 33
 21a:	33 40       	sbci	r19, 0x03	; 3
 21c:	2f 33       	cpi	r18, 0x3F	; 63
 21e:	31 05       	cpc	r19, r1
 220:	30 f4       	brcc	.+12     	; 0x22e <getADC+0x15a>
	{
		SWR &= 0b11110000;
 222:	2e b3       	in	r18, 0x1e	; 30
 224:	20 7f       	andi	r18, 0xF0	; 240
 226:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00001101;
 228:	2e b3       	in	r18, 0x1e	; 30
 22a:	2d 60       	ori	r18, 0x0D	; 13
 22c:	2e bb       	out	0x1e, r18	; 30
	}
	if((864 < adcval) && (adcval < 928))        //  1 1 1 0 / 0 - 1023
 22e:	9c 01       	movw	r18, r24
 230:	21 56       	subi	r18, 0x61	; 97
 232:	33 40       	sbci	r19, 0x03	; 3
 234:	2f 33       	cpi	r18, 0x3F	; 63
 236:	31 05       	cpc	r19, r1
 238:	30 f4       	brcc	.+12     	; 0x246 <getADC+0x172>
	{
		SWR &= 0b11110000;
 23a:	2e b3       	in	r18, 0x1e	; 30
 23c:	20 7f       	andi	r18, 0xF0	; 240
 23e:	2e bb       	out	0x1e, r18	; 30
		SWR |= 0b00001110;
 240:	2e b3       	in	r18, 0x1e	; 30
 242:	2e 60       	ori	r18, 0x0E	; 14
 244:	2e bb       	out	0x1e, r18	; 30
	}
	if(928 < adcval)			//  1 1 1 1 / 0 - 1023
 246:	81 3a       	cpi	r24, 0xA1	; 161
 248:	93 40       	sbci	r25, 0x03	; 3
 24a:	30 f0       	brcs	.+12     	; 0x258 <getADC+0x184>
	{
		SWR &= 0b11110000;
 24c:	8e b3       	in	r24, 0x1e	; 30
 24e:	80 7f       	andi	r24, 0xF0	; 240
 250:	8e bb       	out	0x1e, r24	; 30
		SWR |= 0b00001111;
 252:	8e b3       	in	r24, 0x1e	; 30
 254:	8f 60       	ori	r24, 0x0F	; 15
 256:	8e bb       	out	0x1e, r24	; 30
 258:	08 95       	ret

0000025a <main>:
		move(0, 0, 64000);
		run(0, 0, 100);
		_delay_ms(20000);
		softStop(0);
		_delay_ms(1000);*/
		getADC();
 25a:	0e 94 6a 00 	call	0xd4	; 0xd4 <getADC>
 25e:	fd cf       	rjmp	.-6      	; 0x25a <main>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
